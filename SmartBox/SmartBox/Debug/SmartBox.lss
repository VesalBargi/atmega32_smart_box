
SmartBox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00002484  00002518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000db  008001a4  008001a4  0000265c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c3a  00000000  00000000  00002aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115f  00000000  00000000  00006726  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f74  00000000  00000000  00007885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b98  00000000  00000000  000097fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000115c  00000000  00000000  0000a394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b2e  00000000  00000000  0000b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000e01e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_1>
       8:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__vector_2>
       c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_3>
      10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      14:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_5>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_9>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_11>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_13>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_16>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	63 64       	ori	r22, 0x43	; 67
      56:	69 6e       	ori	r22, 0xE9	; 233
      58:	6f 70       	andi	r22, 0x0F	; 15
      5a:	73 75       	andi	r23, 0x53	; 83
      5c:	78 58       	subi	r23, 0x88	; 136
      5e:	5b 00       	.word	0x005b	; ????

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d8 e0       	ldi	r29, 0x08	; 8
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	11 e0       	ldi	r17, 0x01	; 1
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	e4 e8       	ldi	r30, 0x84	; 132
      74:	f4 e2       	ldi	r31, 0x24	; 36
      76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0
      7c:	a4 3a       	cpi	r26, 0xA4	; 164
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
      82:	22 e0       	ldi	r18, 0x02	; 2
      84:	a4 ea       	ldi	r26, 0xA4	; 164
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	af 37       	cpi	r26, 0x7F	; 127
      8e:	b2 07       	cpc	r27, r18
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 fe 08 	call	0x11fc	; 0x11fc <main>
      96:	0c 94 40 12 	jmp	0x2480	; 0x2480 <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <Dec2bcd>:
		reg |= Frequency;
	}

	//Write control register
	RTC_WriteByte(__RTC_Address_Control, reg);
}
      9e:	9a e1       	ldi	r25, 0x1A	; 26
      a0:	89 9f       	mul	r24, r25
      a2:	90 01       	movw	r18, r0
      a4:	11 24       	eor	r1, r1
      a6:	93 2f       	mov	r25, r19
      a8:	99 0f       	add	r25, r25
      aa:	93 0f       	add	r25, r19
      ac:	99 0f       	add	r25, r25
      ae:	89 0f       	add	r24, r25
      b0:	08 95       	ret

000000b2 <RTC_Status>:
      b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__RTC_Status>
      b6:	08 95       	ret

000000b8 <RTC_WriteBlock>:
      b8:	ef 92       	push	r14
      ba:	ff 92       	push	r15
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	cf 93       	push	r28
      c2:	df 93       	push	r29
      c4:	c8 2f       	mov	r28, r24
      c6:	7b 01       	movw	r14, r22
      c8:	14 2f       	mov	r17, r20
      ca:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_BeginTransmission>
      ce:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	29 f0       	breq	.+10     	; 0xe0 <RTC_WriteBlock+0x28>
      d6:	80 31       	cpi	r24, 0x10	; 16
      d8:	19 f0       	breq	.+6      	; 0xe0 <RTC_WriteBlock+0x28>
      da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
      de:	32 c0       	rjmp	.+100    	; 0x144 <RTC_WriteBlock+0x8c>
      e0:	80 ed       	ldi	r24, 0xD0	; 208
      e2:	0e 94 0b 05 	call	0xa16	; 0xa16 <TWI_Transmit>
      e6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
      ea:	88 31       	cpi	r24, 0x18	; 24
      ec:	29 f0       	breq	.+10     	; 0xf8 <RTC_WriteBlock+0x40>
      ee:	80 32       	cpi	r24, 0x20	; 32
      f0:	19 f0       	breq	.+6      	; 0xf8 <RTC_WriteBlock+0x40>
      f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
      f6:	26 c0       	rjmp	.+76     	; 0x144 <RTC_WriteBlock+0x8c>
      f8:	8c 2f       	mov	r24, r28
      fa:	0e 94 0b 05 	call	0xa16	; 0xa16 <TWI_Transmit>
      fe:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
     102:	88 32       	cpi	r24, 0x28	; 40
     104:	19 f4       	brne	.+6      	; 0x10c <RTC_WriteBlock+0x54>
     106:	11 11       	cpse	r17, r1
     108:	06 c0       	rjmp	.+12     	; 0x116 <RTC_WriteBlock+0x5e>
     10a:	19 c0       	rjmp	.+50     	; 0x13e <RTC_WriteBlock+0x86>
     10c:	80 33       	cpi	r24, 0x30	; 48
     10e:	d9 f3       	breq	.-10     	; 0x106 <RTC_WriteBlock+0x4e>
     110:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     114:	17 c0       	rjmp	.+46     	; 0x144 <RTC_WriteBlock+0x8c>
     116:	e7 01       	movw	r28, r14
     118:	11 50       	subi	r17, 0x01	; 1
     11a:	01 2f       	mov	r16, r17
     11c:	10 e0       	ldi	r17, 0x00	; 0
     11e:	0f 5f       	subi	r16, 0xFF	; 255
     120:	1f 4f       	sbci	r17, 0xFF	; 255
     122:	0e 0d       	add	r16, r14
     124:	1f 1d       	adc	r17, r15
     126:	89 91       	ld	r24, Y+
     128:	0e 94 0b 05 	call	0xa16	; 0xa16 <TWI_Transmit>
     12c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
     130:	88 32       	cpi	r24, 0x28	; 40
     132:	11 f0       	breq	.+4      	; 0x138 <RTC_WriteBlock+0x80>
     134:	80 33       	cpi	r24, 0x30	; 48
     136:	19 f4       	brne	.+6      	; 0x13e <RTC_WriteBlock+0x86>
     138:	c0 17       	cp	r28, r16
     13a:	d1 07       	cpc	r29, r17
     13c:	a1 f7       	brne	.-24     	; 0x126 <RTC_WriteBlock+0x6e>
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__RTC_Status>
     144:	0e 94 05 05 	call	0xa0a	; 0xa0a <TWI_EndTransmission>
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	1f 91       	pop	r17
     14e:	0f 91       	pop	r16
     150:	ff 90       	pop	r15
     152:	ef 90       	pop	r14
     154:	08 95       	ret

00000156 <RTC_WriteByte>:
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	1f 92       	push	r1
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	69 83       	std	Y+1, r22	; 0x01
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	be 01       	movw	r22, r28
     166:	6f 5f       	subi	r22, 0xFF	; 255
     168:	7f 4f       	sbci	r23, 0xFF	; 255
     16a:	0e 94 5c 00 	call	0xb8	; 0xb8 <RTC_WriteBlock>
     16e:	0f 90       	pop	r0
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	08 95       	ret

00000176 <RTC_ReadBlock>:
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	d8 2f       	mov	r29, r24
     182:	8b 01       	movw	r16, r22
     184:	c4 2f       	mov	r28, r20
     186:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_BeginTransmission>
     18a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
     18e:	88 30       	cpi	r24, 0x08	; 8
     190:	29 f0       	breq	.+10     	; 0x19c <RTC_ReadBlock+0x26>
     192:	80 31       	cpi	r24, 0x10	; 16
     194:	19 f0       	breq	.+6      	; 0x19c <RTC_ReadBlock+0x26>
     196:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     19a:	5b c0       	rjmp	.+182    	; 0x252 <RTC_ReadBlock+0xdc>
     19c:	80 ed       	ldi	r24, 0xD0	; 208
     19e:	0e 94 0b 05 	call	0xa16	; 0xa16 <TWI_Transmit>
     1a2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
     1a6:	88 31       	cpi	r24, 0x18	; 24
     1a8:	29 f0       	breq	.+10     	; 0x1b4 <RTC_ReadBlock+0x3e>
     1aa:	80 32       	cpi	r24, 0x20	; 32
     1ac:	19 f0       	breq	.+6      	; 0x1b4 <RTC_ReadBlock+0x3e>
     1ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     1b2:	4f c0       	rjmp	.+158    	; 0x252 <RTC_ReadBlock+0xdc>
     1b4:	8d 2f       	mov	r24, r29
     1b6:	0e 94 0b 05 	call	0xa16	; 0xa16 <TWI_Transmit>
     1ba:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
     1be:	88 32       	cpi	r24, 0x28	; 40
     1c0:	29 f0       	breq	.+10     	; 0x1cc <RTC_ReadBlock+0x56>
     1c2:	80 33       	cpi	r24, 0x30	; 48
     1c4:	19 f0       	breq	.+6      	; 0x1cc <RTC_ReadBlock+0x56>
     1c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     1ca:	43 c0       	rjmp	.+134    	; 0x252 <RTC_ReadBlock+0xdc>
     1cc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TWI_BeginTransmission>
     1d0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
     1d4:	88 30       	cpi	r24, 0x08	; 8
     1d6:	29 f0       	breq	.+10     	; 0x1e2 <RTC_ReadBlock+0x6c>
     1d8:	80 31       	cpi	r24, 0x10	; 16
     1da:	19 f0       	breq	.+6      	; 0x1e2 <RTC_ReadBlock+0x6c>
     1dc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     1e0:	38 c0       	rjmp	.+112    	; 0x252 <RTC_ReadBlock+0xdc>
     1e2:	81 ed       	ldi	r24, 0xD1	; 209
     1e4:	0e 94 0b 05 	call	0xa16	; 0xa16 <TWI_Transmit>
     1e8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
     1ec:	87 7f       	andi	r24, 0xF7	; 247
     1ee:	80 34       	cpi	r24, 0x40	; 64
     1f0:	39 f4       	brne	.+14     	; 0x200 <RTC_ReadBlock+0x8a>
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
     1f4:	21 97       	sbiw	r28, 0x01	; 1
     1f6:	1c 16       	cp	r1, r28
     1f8:	1d 06       	cpc	r1, r29
     1fa:	2c f0       	brlt	.+10     	; 0x206 <RTC_ReadBlock+0x90>
     1fc:	f1 2c       	mov	r15, r1
     1fe:	18 c0       	rjmp	.+48     	; 0x230 <RTC_ReadBlock+0xba>
     200:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     204:	26 c0       	rjmp	.+76     	; 0x252 <RTC_ReadBlock+0xdc>
     206:	f1 2c       	mov	r15, r1
     208:	0e 94 14 05 	call	0xa28	; 0xa28 <TWI_ReceiveACK>
     20c:	f8 01       	movw	r30, r16
     20e:	ef 0d       	add	r30, r15
     210:	f1 1d       	adc	r31, r1
     212:	80 83       	st	Z, r24
     214:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
     218:	87 7f       	andi	r24, 0xF7	; 247
     21a:	80 35       	cpi	r24, 0x50	; 80
     21c:	19 f0       	breq	.+6      	; 0x224 <RTC_ReadBlock+0xae>
     21e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     222:	06 c0       	rjmp	.+12     	; 0x230 <RTC_ReadBlock+0xba>
     224:	f3 94       	inc	r15
     226:	8f 2d       	mov	r24, r15
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	8c 17       	cp	r24, r28
     22c:	9d 07       	cpc	r25, r29
     22e:	64 f3       	brlt	.-40     	; 0x208 <RTC_ReadBlock+0x92>
     230:	e8 01       	movw	r28, r16
     232:	cf 0d       	add	r28, r15
     234:	d1 1d       	adc	r29, r1
     236:	0e 94 1b 05 	call	0xa36	; 0xa36 <TWI_ReceiveNACK>
     23a:	88 83       	st	Y, r24
     23c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_Status>
     240:	87 7f       	andi	r24, 0xF7	; 247
     242:	80 35       	cpi	r24, 0x50	; 80
     244:	19 f0       	breq	.+6      	; 0x24c <RTC_ReadBlock+0xd6>
     246:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     24a:	03 c0       	rjmp	.+6      	; 0x252 <RTC_ReadBlock+0xdc>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__RTC_Status>
     252:	0e 94 05 05 	call	0xa0a	; 0xa0a <TWI_EndTransmission>
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	08 95       	ret

00000262 <RTC_ReadByte>:
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	1f 92       	push	r1
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	41 e0       	ldi	r20, 0x01	; 1
     26e:	be 01       	movw	r22, r28
     270:	6f 5f       	subi	r22, 0xFF	; 255
     272:	7f 4f       	sbci	r23, 0xFF	; 255
     274:	0e 94 bb 00 	call	0x176	; 0x176 <RTC_ReadBlock>
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <FlagWrite>:
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	d8 2f       	mov	r29, r24
     28c:	06 2f       	mov	r16, r22
     28e:	14 2f       	mov	r17, r20
     290:	0e 94 31 01 	call	0x262	; 0x262 <RTC_ReadByte>
     294:	48 2f       	mov	r20, r24
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	00 2e       	mov	r0, r16
     29e:	04 c0       	rjmp	.+8      	; 0x2a8 <FlagWrite+0x26>
     2a0:	76 95       	lsr	r23
     2a2:	67 95       	ror	r22
     2a4:	57 95       	ror	r21
     2a6:	47 95       	ror	r20
     2a8:	0a 94       	dec	r0
     2aa:	d2 f7       	brpl	.-12     	; 0x2a0 <FlagWrite+0x1e>
     2ac:	c4 2f       	mov	r28, r20
     2ae:	c1 70       	andi	r28, 0x01	; 1
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <FlagWrite+0x40>
     2ba:	44 0f       	add	r20, r20
     2bc:	55 1f       	adc	r21, r21
     2be:	66 1f       	adc	r22, r22
     2c0:	77 1f       	adc	r23, r23
     2c2:	0a 95       	dec	r16
     2c4:	d2 f7       	brpl	.-12     	; 0x2ba <FlagWrite+0x38>
     2c6:	11 11       	cpse	r17, r1
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <FlagWrite+0x50>
     2ca:	64 2f       	mov	r22, r20
     2cc:	60 95       	com	r22
     2ce:	68 23       	and	r22, r24
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FlagWrite+0x54>
     2d2:	68 2f       	mov	r22, r24
     2d4:	64 2b       	or	r22, r20
     2d6:	8d 2f       	mov	r24, r29
     2d8:	0e 94 ab 00 	call	0x156	; 0x156 <RTC_WriteByte>
     2dc:	8c 2f       	mov	r24, r28
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <RTC_Set>:
     2e8:	af 92       	push	r10
     2ea:	bf 92       	push	r11
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	28 97       	sbiw	r28, 0x08	; 8
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	a3 2e       	mov	r10, r19
     30e:	b4 2e       	mov	r11, r20
     310:	c5 2e       	mov	r12, r21
     312:	d6 2e       	mov	r13, r22
     314:	e7 2e       	mov	r14, r23
     316:	f8 2e       	mov	r15, r24
     318:	82 2f       	mov	r24, r18
     31a:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     31e:	0c eb       	ldi	r16, 0xBC	; 188
     320:	11 e0       	ldi	r17, 0x01	; 1
     322:	f8 01       	movw	r30, r16
     324:	80 83       	st	Z, r24
     326:	8a 2d       	mov	r24, r10
     328:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     32c:	f8 01       	movw	r30, r16
     32e:	81 83       	std	Z+1, r24	; 0x01
     330:	8b 2d       	mov	r24, r11
     332:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     336:	f8 01       	movw	r30, r16
     338:	82 83       	std	Z+2, r24	; 0x02
     33a:	8c 2d       	mov	r24, r12
     33c:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     340:	f8 01       	movw	r30, r16
     342:	83 83       	std	Z+3, r24	; 0x03
     344:	8d 2d       	mov	r24, r13
     346:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     34a:	f8 01       	movw	r30, r16
     34c:	84 83       	std	Z+4, r24	; 0x04
     34e:	8e 2d       	mov	r24, r14
     350:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     354:	f8 01       	movw	r30, r16
     356:	85 83       	std	Z+5, r24	; 0x05
     358:	80 e3       	ldi	r24, 0x30	; 48
     35a:	8f 0d       	add	r24, r15
     35c:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     360:	f8 01       	movw	r30, r16
     362:	86 83       	std	Z+6, r24	; 0x06
     364:	47 e0       	ldi	r20, 0x07	; 7
     366:	b8 01       	movw	r22, r16
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 5c 00 	call	0xb8	; 0xb8 <RTC_WriteBlock>
     36e:	28 96       	adiw	r28, 0x08	; 8
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	08 95       	ret

00000390 <RTC_Get>:
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	28 97       	sbiw	r28, 0x08	; 8
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	47 e0       	ldi	r20, 0x07	; 7
     3a6:	6c eb       	ldi	r22, 0xBC	; 188
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	0e 94 bb 00 	call	0x176	; 0x176 <RTC_ReadBlock>
     3b0:	ec eb       	ldi	r30, 0xBC	; 188
     3b2:	f1 e0       	ldi	r31, 0x01	; 1
     3b4:	20 81       	ld	r18, Z
     3b6:	31 81       	ldd	r19, Z+1	; 0x01
     3b8:	42 81       	ldd	r20, Z+2	; 0x02
     3ba:	4f 73       	andi	r20, 0x3F	; 63
     3bc:	53 81       	ldd	r21, Z+3	; 0x03
     3be:	64 81       	ldd	r22, Z+4	; 0x04
     3c0:	75 81       	ldd	r23, Z+5	; 0x05
     3c2:	86 81       	ldd	r24, Z+6	; 0x06
     3c4:	92 2f       	mov	r25, r18
     3c6:	92 95       	swap	r25
     3c8:	9f 70       	andi	r25, 0x0F	; 15
     3ca:	e9 2f       	mov	r30, r25
     3cc:	ee 0f       	add	r30, r30
     3ce:	9e 0f       	add	r25, r30
     3d0:	99 0f       	add	r25, r25
     3d2:	29 1b       	sub	r18, r25
     3d4:	93 2f       	mov	r25, r19
     3d6:	92 95       	swap	r25
     3d8:	9f 70       	andi	r25, 0x0F	; 15
     3da:	e9 2f       	mov	r30, r25
     3dc:	ee 0f       	add	r30, r30
     3de:	9e 0f       	add	r25, r30
     3e0:	99 0f       	add	r25, r25
     3e2:	39 1b       	sub	r19, r25
     3e4:	94 2f       	mov	r25, r20
     3e6:	92 95       	swap	r25
     3e8:	9f 70       	andi	r25, 0x0F	; 15
     3ea:	e9 2f       	mov	r30, r25
     3ec:	ee 0f       	add	r30, r30
     3ee:	9e 0f       	add	r25, r30
     3f0:	99 0f       	add	r25, r25
     3f2:	49 1b       	sub	r20, r25
     3f4:	95 2f       	mov	r25, r21
     3f6:	92 95       	swap	r25
     3f8:	9f 70       	andi	r25, 0x0F	; 15
     3fa:	e9 2f       	mov	r30, r25
     3fc:	ee 0f       	add	r30, r30
     3fe:	9e 0f       	add	r25, r30
     400:	99 0f       	add	r25, r25
     402:	59 1b       	sub	r21, r25
     404:	96 2f       	mov	r25, r22
     406:	92 95       	swap	r25
     408:	9f 70       	andi	r25, 0x0F	; 15
     40a:	e9 2f       	mov	r30, r25
     40c:	ee 0f       	add	r30, r30
     40e:	9e 0f       	add	r25, r30
     410:	99 0f       	add	r25, r25
     412:	69 1b       	sub	r22, r25
     414:	97 2f       	mov	r25, r23
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	e9 2f       	mov	r30, r25
     41c:	ee 0f       	add	r30, r30
     41e:	9e 0f       	add	r25, r30
     420:	99 0f       	add	r25, r25
     422:	79 1b       	sub	r23, r25
     424:	98 2f       	mov	r25, r24
     426:	92 95       	swap	r25
     428:	9f 70       	andi	r25, 0x0F	; 15
     42a:	e9 2f       	mov	r30, r25
     42c:	ee 0f       	add	r30, r30
     42e:	9e 0f       	add	r25, r30
     430:	99 0f       	add	r25, r25
     432:	89 1b       	sub	r24, r25
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	80 53       	subi	r24, 0x30	; 48
     438:	98 4f       	sbci	r25, 0xF8	; 248
     43a:	98 87       	std	Y+8, r25	; 0x08
     43c:	8f 83       	std	Y+7, r24	; 0x07
     43e:	98 85       	ldd	r25, Y+8	; 0x08
     440:	28 96       	adiw	r28, 0x08	; 8
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <RTC_AlarmSet>:

//Set alarm.
void RTC_AlarmSet(Alarm_Type_t Alarm, uint8_t DayDate, uint8_t Hours, uint8_t Minutes, uint8_t Seconds)
{
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	c8 2f       	mov	r28, r24
     460:	d6 2f       	mov	r29, r22
     462:	14 2f       	mov	r17, r20
     464:	e2 2e       	mov	r14, r18
     466:	80 2f       	mov	r24, r16
	uint8_t addr;

	//Convert all decimal values to their corresponding BCD values
	Seconds = Dec2bcd(Seconds);
     468:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     46c:	f8 2e       	mov	r15, r24
	Minutes = Dec2bcd(Minutes);
     46e:	8e 2d       	mov	r24, r14
     470:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     474:	08 2f       	mov	r16, r24
	Hours   = Dec2bcd(Hours);
     476:	81 2f       	mov	r24, r17
     478:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     47c:	18 2f       	mov	r17, r24
	DayDate = Dec2bcd(DayDate);	//Either Day or Date can be used. Not both.
     47e:	8d 2f       	mov	r24, r29
     480:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     484:	d8 2f       	mov	r29, r24
	
	//Set Alarm Control Bits based on Alarm Mask Bits
	//Seconds
	if (BitCheck(Alarm, 0))
     486:	c0 ff       	sbrs	r28, 0
     488:	03 c0       	rjmp	.+6      	; 0x490 <RTC_AlarmSet+0x3e>
		BitSet(Seconds, __RTC_A1M1);
     48a:	8f 2d       	mov	r24, r15
     48c:	80 68       	ori	r24, 0x80	; 128
     48e:	f8 2e       	mov	r15, r24
	//Minutes
	if (BitCheck(Alarm, 1))
     490:	c1 fd       	sbrc	r28, 1
		BitSet(Minutes, __RTC_A1M2);
     492:	00 68       	ori	r16, 0x80	; 128
	//Hours
	if (BitCheck(Alarm, 2))
     494:	c2 fd       	sbrc	r28, 2
		BitSet(Hours, __RTC_A1M3);
     496:	10 68       	ori	r17, 0x80	; 128
	//Day-Date value
	if (BitCheck(Alarm, 3))
     498:	c3 fd       	sbrc	r28, 3
		BitSet(DayDate, __RTC_A1M4);
     49a:	d0 68       	ori	r29, 0x80	; 128
	//Day-Date flag
	if (BitCheck(Alarm, 4))
     49c:	c4 fd       	sbrc	r28, 4
		BitSet(DayDate, __RTC_DYDT);
     49e:	d0 64       	ori	r29, 0x40	; 64
	
	//Send data (on consecutive address)
	//Alarm 2
	if (BitCheck(Alarm, 7))
     4a0:	cc 23       	and	r28, r28
     4a2:	34 f0       	brlt	.+12     	; 0x4b0 <RTC_AlarmSet+0x5e>
	//Alarm 1
	else
	{
		//Alarm 1 does have a seconds register
		addr = __RTC_Address_Alarm1_Seconds;
		RTC_WriteByte(addr++, Seconds);
     4a4:	6f 2d       	mov	r22, r15
     4a6:	87 e0       	ldi	r24, 0x07	; 7
     4a8:	0e 94 ab 00 	call	0x156	; 0x156 <RTC_WriteByte>
     4ac:	c8 e0       	ldi	r28, 0x08	; 8
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <RTC_AlarmSet+0x60>
	//Send data (on consecutive address)
	//Alarm 2
	if (BitCheck(Alarm, 7))
	{
		//Alarm 2 does not have seconds register
		addr = __RTC_Address_Alarm2_Minutes;
     4b0:	cb e0       	ldi	r28, 0x0B	; 11
	{
		//Alarm 1 does have a seconds register
		addr = __RTC_Address_Alarm1_Seconds;
		RTC_WriteByte(addr++, Seconds);
	}
	RTC_WriteByte(addr++, Minutes);
     4b2:	60 2f       	mov	r22, r16
     4b4:	8c 2f       	mov	r24, r28
     4b6:	0e 94 ab 00 	call	0x156	; 0x156 <RTC_WriteByte>
	RTC_WriteByte(addr++, Hours);
     4ba:	61 2f       	mov	r22, r17
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	8c 0f       	add	r24, r28
     4c0:	0e 94 ab 00 	call	0x156	; 0x156 <RTC_WriteByte>
	RTC_WriteByte(addr++, DayDate);
     4c4:	6d 2f       	mov	r22, r29
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	8c 0f       	add	r24, r28
     4ca:	0e 94 ab 00 	call	0x156	; 0x156 <RTC_WriteByte>
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	08 95       	ret

000004dc <RTC_AlarmInterrupt>:

//Set alarm interrupt pin 
uint8_t RTC_AlarmInterrupt(Alarm_Number_t Alarm, uint8_t Enable)
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	d8 2f       	mov	r29, r24
     4e2:	c6 2f       	mov	r28, r22
	//Enable INTCN
	FlagWrite(__RTC_Address_Control, __RTC_INTCN, Enable);
     4e4:	46 2f       	mov	r20, r22
     4e6:	62 e0       	ldi	r22, 0x02	; 2
     4e8:	8e e0       	ldi	r24, 0x0E	; 14
     4ea:	0e 94 41 01 	call	0x282	; 0x282 <FlagWrite>
		
	//Enable alarm
	return (FlagWrite(__RTC_Address_Control, Alarm, Enable));
     4ee:	4c 2f       	mov	r20, r28
     4f0:	6d 2f       	mov	r22, r29
     4f2:	8e e0       	ldi	r24, 0x0E	; 14
     4f4:	0e 94 41 01 	call	0x282	; 0x282 <FlagWrite>
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <RTC_AlarmCheck>:

//Check if alarm rung. 
uint8_t RTC_AlarmCheck(Alarm_Number_t Alarm)
{
	return (FlagWrite(__RTC_Address_Status, Alarm, False));
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	68 2f       	mov	r22, r24
     502:	8f e0       	ldi	r24, 0x0F	; 15
     504:	0e 94 41 01 	call	0x282	; 0x282 <FlagWrite>
}
     508:	08 95       	ret

0000050a <timer2_init>:
uint32_t timer_counter = 0;
uint32_t sensor_distance;

void timer2_init(void)
{
  TIMSK |= (1 << TOIE2);
     50a:	89 b7       	in	r24, 0x39	; 57
     50c:	80 64       	ori	r24, 0x40	; 64
     50e:	89 bf       	out	0x39, r24	; 57
  TCCR2 = (1 << CS21);
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	85 bd       	out	0x25, r24	; 37
  TCNT2 = 0;
     514:	14 bc       	out	0x24, r1	; 36
     516:	08 95       	ret

00000518 <enable_ex_interrupt>:
  return;
}

void enable_ex_interrupt(void)
{
  MCUCR |= (1 << ISC00);
     518:	85 b7       	in	r24, 0x35	; 53
     51a:	81 60       	ori	r24, 0x01	; 1
     51c:	85 bf       	out	0x35, r24	; 53
  GICR |= (1 << INT0);
     51e:	8b b7       	in	r24, 0x3b	; 59
     520:	80 64       	ori	r24, 0x40	; 64
     522:	8b bf       	out	0x3b, r24	; 59
     524:	08 95       	ret

00000526 <ultrasonic_init>:
  TCNT2 = 0;
}

void ultrasonic_init(void)
{
  TRIGER_DDR |= (1 << TRIGER);
     526:	8c 9a       	sbi	0x11, 4	; 17
  ECHO_DDR &= ~(1 << ECHO);
     528:	8a 98       	cbi	0x11, 2	; 17
  ECHO_PULLUP |= (1 << ECHO);
     52a:	92 9a       	sbi	0x12, 2	; 18
  enable_ex_interrupt();
     52c:	0e 94 8c 02 	call	0x518	; 0x518 <enable_ex_interrupt>
  timer2_init();
     530:	0e 94 85 02 	call	0x50a	; 0x50a <timer2_init>
     534:	08 95       	ret

00000536 <ultrasonic_triger>:
  return;
}

uint32_t ultrasonic_triger(void)
{
  if (!sensor_working)
     536:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <sensor_working>
     53a:	81 11       	cpse	r24, r1
     53c:	08 c0       	rjmp	.+16     	; 0x54e <ultrasonic_triger+0x18>
  {
    TRIGER_PORT |= (1 << TRIGER);
     53e:	94 9a       	sbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     540:	88 e2       	ldi	r24, 0x28	; 40
     542:	8a 95       	dec	r24
     544:	f1 f7       	brne	.-4      	; 0x542 <ultrasonic_triger+0xc>
    _delay_us(15);
    TRIGER_PORT &= ~(1 << TRIGER);
     546:	94 98       	cbi	0x12, 4	; 18
    sensor_working = 1;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <sensor_working>
  }
  return sensor_distance;
     54e:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <sensor_distance>
     552:	70 91 c4 01 	lds	r23, 0x01C4	; 0x8001c4 <sensor_distance+0x1>
     556:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <sensor_distance+0x2>
     55a:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <sensor_distance+0x3>
}
     55e:	08 95       	ret

00000560 <__vector_1>:

ISR(INT0_vect)
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
  if (sensor_working == 1)
     582:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <sensor_working>
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	09 f0       	breq	.+2      	; 0x58c <__vector_1+0x2c>
     58a:	45 c0       	rjmp	.+138    	; 0x616 <__vector_1+0xb6>
  {
    if (rising_edge == 0)
     58c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <rising_edge>
     590:	81 11       	cpse	r24, r1
     592:	0d c0       	rjmp	.+26     	; 0x5ae <__vector_1+0x4e>
    {
      TCNT2 = 0;
     594:	14 bc       	out	0x24, r1	; 36
      rising_edge = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <rising_edge>
      timer_counter = 0;
     59c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__data_end>
     5a0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__data_end+0x1>
     5a4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end+0x2>
     5a8:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__data_end+0x3>
     5ac:	34 c0       	rjmp	.+104    	; 0x616 <__vector_1+0xb6>
    }
    else
    {
      sensor_distance = ((timer_counter * 256 + TCNT2) / 58);
     5ae:	24 b5       	in	r18, 0x24	; 36
     5b0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
     5b4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__data_end+0x1>
     5b8:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <__data_end+0x2>
     5bc:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <__data_end+0x3>
     5c0:	ba 2f       	mov	r27, r26
     5c2:	a9 2f       	mov	r26, r25
     5c4:	98 2f       	mov	r25, r24
     5c6:	88 27       	eor	r24, r24
     5c8:	bc 01       	movw	r22, r24
     5ca:	cd 01       	movw	r24, r26
     5cc:	62 0f       	add	r22, r18
     5ce:	71 1d       	adc	r23, r1
     5d0:	81 1d       	adc	r24, r1
     5d2:	91 1d       	adc	r25, r1
     5d4:	2a e3       	ldi	r18, 0x3A	; 58
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__udivmodsi4>
     5e0:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <sensor_distance>
     5e4:	30 93 c4 01 	sts	0x01C4, r19	; 0x8001c4 <sensor_distance+0x1>
     5e8:	40 93 c5 01 	sts	0x01C5, r20	; 0x8001c5 <sensor_distance+0x2>
     5ec:	50 93 c6 01 	sts	0x01C6, r21	; 0x8001c6 <sensor_distance+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f0:	2f ef       	ldi	r18, 0xFF	; 255
     5f2:	89 ef       	ldi	r24, 0xF9	; 249
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	80 40       	sbci	r24, 0x00	; 0
     5fa:	90 40       	sbci	r25, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <__vector_1+0x96>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <__vector_1+0xa0>
     600:	00 00       	nop
      _delay_ms(40);
      timer_counter = 0;
     602:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__data_end>
     606:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__data_end+0x1>
     60a:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end+0x2>
     60e:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__data_end+0x3>
      rising_edge = 0;
     612:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <rising_edge>
    }
  }
}
     616:	ff 91       	pop	r31
     618:	ef 91       	pop	r30
     61a:	bf 91       	pop	r27
     61c:	af 91       	pop	r26
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	7f 91       	pop	r23
     624:	6f 91       	pop	r22
     626:	5f 91       	pop	r21
     628:	4f 91       	pop	r20
     62a:	3f 91       	pop	r19
     62c:	2f 91       	pop	r18
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
  timer_counter++;
     64c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
     650:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__data_end+0x1>
     654:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <__data_end+0x2>
     658:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <__data_end+0x3>
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	a1 1d       	adc	r26, r1
     660:	b1 1d       	adc	r27, r1
     662:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <__data_end>
     666:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <__data_end+0x1>
     66a:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <__data_end+0x2>
     66e:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <__data_end+0x3>
  if (timer_counter > 730)
     672:	8b 3d       	cpi	r24, 0xDB	; 219
     674:	92 40       	sbci	r25, 0x02	; 2
     676:	a1 05       	cpc	r26, r1
     678:	b1 05       	cpc	r27, r1
     67a:	68 f0       	brcs	.+26     	; 0x696 <__vector_5+0x5e>
  {
	  TCNT2 = 0;
     67c:	14 bc       	out	0x24, r1	; 36
	  sensor_working = 0;
     67e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <sensor_working>
	  rising_edge = 0;
     682:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <rising_edge>
	  timer_counter = 0;
     686:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__data_end>
     68a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__data_end+0x1>
     68e:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end+0x2>
     692:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__data_end+0x3>
  }
}
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	2f 91       	pop	r18
     6a0:	0f 90       	pop	r0
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	0f 90       	pop	r0
     6a6:	1f 90       	pop	r1
     6a8:	18 95       	reti

000006aa <i2c_master_init>:
	}
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	11 b8       	out	0x01, r1	; 1
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	72 e1       	ldi	r23, 0x12	; 18
     6b4:	8a e7       	ldi	r24, 0x7A	; 122
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__udivmodsi4>
     6bc:	da 01       	movw	r26, r20
     6be:	c9 01       	movw	r24, r18
     6c0:	40 97       	sbiw	r24, 0x10	; 16
     6c2:	a1 09       	sbc	r26, r1
     6c4:	b1 09       	sbc	r27, r1
     6c6:	b6 95       	lsr	r27
     6c8:	a7 95       	ror	r26
     6ca:	97 95       	ror	r25
     6cc:	87 95       	ror	r24
     6ce:	80 b9       	out	0x00, r24	; 0
     6d0:	08 95       	ret

000006d2 <i2c_master_start>:
     6d2:	16 be       	out	0x36, r1	; 54
     6d4:	94 ea       	ldi	r25, 0xA4	; 164
     6d6:	96 bf       	out	0x36, r25	; 54
     6d8:	06 b6       	in	r0, 0x36	; 54
     6da:	07 fe       	sbrs	r0, 7
     6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <i2c_master_start+0x6>
     6de:	91 b1       	in	r25, 0x01	; 1
     6e0:	98 7f       	andi	r25, 0xF8	; 248
     6e2:	98 30       	cpi	r25, 0x08	; 8
     6e4:	11 f0       	breq	.+4      	; 0x6ea <i2c_master_start+0x18>
     6e6:	90 31       	cpi	r25, 0x10	; 16
     6e8:	81 f4       	brne	.+32     	; 0x70a <i2c_master_start+0x38>
     6ea:	88 0f       	add	r24, r24
     6ec:	68 2b       	or	r22, r24
     6ee:	63 b9       	out	0x03, r22	; 3
     6f0:	84 e8       	ldi	r24, 0x84	; 132
     6f2:	86 bf       	out	0x36, r24	; 54
     6f4:	06 b6       	in	r0, 0x36	; 54
     6f6:	07 fe       	sbrs	r0, 7
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <i2c_master_start+0x22>
     6fa:	81 b1       	in	r24, 0x01	; 1
     6fc:	88 7f       	andi	r24, 0xF8	; 248
     6fe:	88 31       	cpi	r24, 0x18	; 24
     700:	31 f0       	breq	.+12     	; 0x70e <i2c_master_start+0x3c>
     702:	80 34       	cpi	r24, 0x40	; 64
     704:	31 f0       	breq	.+12     	; 0x712 <i2c_master_start+0x40>
     706:	84 e1       	ldi	r24, 0x14	; 20
     708:	08 95       	ret
     70a:	8a e0       	ldi	r24, 0x0A	; 10
     70c:	08 95       	ret
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	08 95       	ret
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	08 95       	ret

00000716 <i2c_master_write>:
     716:	83 b9       	out	0x03, r24	; 3
     718:	84 e8       	ldi	r24, 0x84	; 132
     71a:	86 bf       	out	0x36, r24	; 54
     71c:	06 b6       	in	r0, 0x36	; 54
     71e:	07 fe       	sbrs	r0, 7
     720:	fd cf       	rjmp	.-6      	; 0x71c <i2c_master_write+0x6>
     722:	81 b1       	in	r24, 0x01	; 1
     724:	88 7f       	andi	r24, 0xF8	; 248
     726:	88 32       	cpi	r24, 0x28	; 40
     728:	11 f4       	brne	.+4      	; 0x72e <i2c_master_write+0x18>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret
     72e:	85 e1       	ldi	r24, 0x15	; 21
     730:	08 95       	ret

00000732 <i2c_master_sendByte>:

uint8_t i2c_master_sendByte(uint8_t address, uint8_t data)
{
     732:	cf 93       	push	r28
     734:	c6 2f       	mov	r28, r22
	uint8_t status = i2c_master_start(address, I2C_WRITE);
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	0e 94 69 03 	call	0x6d2	; 0x6d2 <i2c_master_start>
	if (status) return status;
     73c:	81 11       	cpse	r24, r1
     73e:	07 c0       	rjmp	.+14     	; 0x74e <i2c_master_sendByte+0x1c>

	status = i2c_master_write(data);
     740:	8c 2f       	mov	r24, r28
     742:	0e 94 8b 03 	call	0x716	; 0x716 <i2c_master_write>
	if (status) return status;
     746:	81 11       	cpse	r24, r1
     748:	02 c0       	rjmp	.+4      	; 0x74e <i2c_master_sendByte+0x1c>
	return I2C_STATUS_SUCCESS;
}

void i2c_master_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     74a:	94 e9       	ldi	r25, 0x94	; 148
     74c:	96 bf       	out	0x36, r25	; 54
	if (status) return status;

	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
};
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <lq_transmitI2C>:

	for (i = 0; i < 8; i++)
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
     752:	fc 01       	movw	r30, r24
     754:	93 81       	ldd	r25, Z+3	; 0x03
     756:	69 2b       	or	r22, r25
     758:	80 81       	ld	r24, Z
     75a:	0e 94 99 03 	call	0x732	; 0x732 <i2c_master_sendByte>
     75e:	08 95       	ret

00000760 <lq_writeDevicePulse>:
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	8c 01       	movw	r16, r24
     768:	c6 2f       	mov	r28, r22
     76a:	64 60       	ori	r22, 0x04	; 4
     76c:	0e 94 a9 03 	call	0x752	; 0x752 <lq_transmitI2C>
     770:	85 e0       	ldi	r24, 0x05	; 5
     772:	8a 95       	dec	r24
     774:	f1 f7       	brne	.-4      	; 0x772 <lq_writeDevicePulse+0x12>
     776:	00 00       	nop
     778:	6c 2f       	mov	r22, r28
     77a:	6b 7f       	andi	r22, 0xFB	; 251
     77c:	c8 01       	movw	r24, r16
     77e:	0e 94 a9 03 	call	0x752	; 0x752 <lq_transmitI2C>
     782:	85 e8       	ldi	r24, 0x85	; 133
     784:	8a 95       	dec	r24
     786:	f1 f7       	brne	.-4      	; 0x784 <lq_writeDevicePulse+0x24>
     788:	00 00       	nop
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <lq_writeDevice4Bits>:
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	ec 01       	movw	r28, r24
     79a:	16 2f       	mov	r17, r22
     79c:	0e 94 a9 03 	call	0x752	; 0x752 <lq_transmitI2C>
     7a0:	61 2f       	mov	r22, r17
     7a2:	ce 01       	movw	r24, r28
     7a4:	0e 94 b0 03 	call	0x760	; 0x760 <lq_writeDevicePulse>
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	08 95       	ret

000007b0 <lq_writeDeviceByte>:
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	8c 01       	movw	r16, r24
     7ba:	c6 2f       	mov	r28, r22
     7bc:	d4 2f       	mov	r29, r20
     7be:	60 7f       	andi	r22, 0xF0	; 240
     7c0:	64 2b       	or	r22, r20
     7c2:	0e 94 c9 03 	call	0x792	; 0x792 <lq_writeDevice4Bits>
     7c6:	80 e1       	ldi	r24, 0x10	; 16
     7c8:	c8 9f       	mul	r28, r24
     7ca:	b0 01       	movw	r22, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	6d 2b       	or	r22, r29
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 c9 03 	call	0x792	; 0x792 <lq_writeDevice4Bits>
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <lq_print>:
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	eb 01       	movw	r28, r22
     7ea:	68 81       	ld	r22, Y
     7ec:	66 23       	and	r22, r22
     7ee:	49 f0       	breq	.+18     	; 0x802 <lq_print+0x22>
     7f0:	8c 01       	movw	r16, r24
     7f2:	21 96       	adiw	r28, 0x01	; 1
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	c8 01       	movw	r24, r16
     7f8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <lq_writeDeviceByte>
     7fc:	69 91       	ld	r22, Y+
     7fe:	61 11       	cpse	r22, r1
     800:	f9 cf       	rjmp	.-14     	; 0x7f4 <lq_print+0x14>
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <lq_sendCommand>:
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <lq_writeDeviceByte>
     812:	08 95       	ret

00000814 <lq_setCursor>:
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	00 d0       	rcall	.+0      	; 0x81a <lq_setCursor+0x6>
     81a:	00 d0       	rcall	.+0      	; 0x81c <lq_setCursor+0x8>
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	19 82       	std	Y+1, r1	; 0x01
     822:	20 e4       	ldi	r18, 0x40	; 64
     824:	2a 83       	std	Y+2, r18	; 0x02
     826:	24 e1       	ldi	r18, 0x14	; 20
     828:	2b 83       	std	Y+3, r18	; 0x03
     82a:	24 e5       	ldi	r18, 0x54	; 84
     82c:	2c 83       	std	Y+4, r18	; 0x04
     82e:	fe 01       	movw	r30, r28
     830:	e6 0f       	add	r30, r22
     832:	f1 1d       	adc	r31, r1
     834:	21 81       	ldd	r18, Z+1	; 0x01
     836:	64 2f       	mov	r22, r20
     838:	62 0f       	add	r22, r18
     83a:	60 68       	ori	r22, 0x80	; 128
     83c:	0e 94 06 04 	call	0x80c	; 0x80c <lq_sendCommand>
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <lq_clear>:
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	0e 94 06 04 	call	0x80c	; 0x80c <lq_sendCommand>
     85a:	8f e9       	ldi	r24, 0x9F	; 159
     85c:	9f e0       	ldi	r25, 0x0F	; 15
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <lq_clear+0x10>
     862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
     864:	00 00       	nop
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	ce 01       	movw	r24, r28
     86c:	0e 94 0a 04 	call	0x814	; 0x814 <lq_setCursor>
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <lq_returnHome>:
     876:	62 e0       	ldi	r22, 0x02	; 2
     878:	0e 94 06 04 	call	0x80c	; 0x80c <lq_sendCommand>
     87c:	8f e9       	ldi	r24, 0x9F	; 159
     87e:	9f e0       	ldi	r25, 0x0F	; 15
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <lq_returnHome+0xa>
     884:	00 c0       	rjmp	.+0      	; 0x886 <lq_returnHome+0x10>
     886:	00 00       	nop
     888:	08 95       	ret

0000088a <lq_turnOnDisplay>:
     88a:	fc 01       	movw	r30, r24
     88c:	65 81       	ldd	r22, Z+5	; 0x05
     88e:	26 2f       	mov	r18, r22
     890:	24 60       	ori	r18, 0x04	; 4
     892:	25 83       	std	Z+5, r18	; 0x05
     894:	6c 60       	ori	r22, 0x0C	; 12
     896:	0e 94 06 04 	call	0x80c	; 0x80c <lq_sendCommand>
     89a:	08 95       	ret

0000089c <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	2e 97       	sbiw	r28, 0x0e	; 14
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
     8b0:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
     8b2:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
     8b4:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
     8b6:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
     8b8:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     8ba:	84 e0       	ldi	r24, 0x04	; 4
     8bc:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
     8c2:	42 30       	cpi	r20, 0x02	; 2
     8c4:	18 f0       	brcs	.+6      	; 0x8cc <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
     8c6:	82 2f       	mov	r24, r18
     8c8:	88 60       	ori	r24, 0x08	; 8
     8ca:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
     8cc:	22 23       	and	r18, r18
     8ce:	29 f0       	breq	.+10     	; 0x8da <lq_init+0x3e>
     8d0:	41 30       	cpi	r20, 0x01	; 1
     8d2:	19 f4       	brne	.+6      	; 0x8da <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
     8d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     8d6:	84 60       	ori	r24, 0x04	; 4
     8d8:	8c 87       	std	Y+12, r24	; 0x0c
     8da:	2f ef       	ldi	r18, 0xFF	; 255
     8dc:	80 e7       	ldi	r24, 0x70	; 112
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	21 50       	subi	r18, 0x01	; 1
     8e2:	80 40       	sbci	r24, 0x00	; 0
     8e4:	90 40       	sbci	r25, 0x00	; 0
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <lq_init+0x44>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <lq_init+0x4e>
     8ea:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	ce 01       	movw	r24, r28
     8f0:	08 96       	adiw	r24, 0x08	; 8
     8f2:	0e 94 a9 03 	call	0x752	; 0x752 <lq_transmitI2C>
     8f6:	2f ef       	ldi	r18, 0xFF	; 255
     8f8:	80 e7       	ldi	r24, 0x70	; 112
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	21 50       	subi	r18, 0x01	; 1
     8fe:	80 40       	sbci	r24, 0x00	; 0
     900:	90 40       	sbci	r25, 0x00	; 0
     902:	e1 f7       	brne	.-8      	; 0x8fc <lq_init+0x60>
     904:	00 c0       	rjmp	.+0      	; 0x906 <lq_init+0x6a>
     906:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
     908:	60 e3       	ldi	r22, 0x30	; 48
     90a:	ce 01       	movw	r24, r28
     90c:	08 96       	adiw	r24, 0x08	; 8
     90e:	0e 94 a9 03 	call	0x752	; 0x752 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     912:	87 e2       	ldi	r24, 0x27	; 39
     914:	93 e2       	ldi	r25, 0x23	; 35
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <lq_init+0x7a>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <lq_init+0x80>
     91c:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
     91e:	60 e3       	ldi	r22, 0x30	; 48
     920:	ce 01       	movw	r24, r28
     922:	08 96       	adiw	r24, 0x08	; 8
     924:	0e 94 c9 03 	call	0x792	; 0x792 <lq_writeDevice4Bits>
     928:	87 e2       	ldi	r24, 0x27	; 39
     92a:	93 e2       	ldi	r25, 0x23	; 35
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <lq_init+0x90>
     930:	00 c0       	rjmp	.+0      	; 0x932 <lq_init+0x96>
     932:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
     934:	60 e3       	ldi	r22, 0x30	; 48
     936:	ce 01       	movw	r24, r28
     938:	08 96       	adiw	r24, 0x08	; 8
     93a:	0e 94 c9 03 	call	0x792	; 0x792 <lq_writeDevice4Bits>
     93e:	8b e2       	ldi	r24, 0x2B	; 43
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <lq_init+0xa6>
     946:	00 c0       	rjmp	.+0      	; 0x948 <lq_init+0xac>
     948:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
     94a:	60 e2       	ldi	r22, 0x20	; 32
     94c:	ce 01       	movw	r24, r28
     94e:	08 96       	adiw	r24, 0x08	; 8
     950:	0e 94 c9 03 	call	0x792	; 0x792 <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
     954:	6c 85       	ldd	r22, Y+12	; 0x0c
     956:	60 62       	ori	r22, 0x20	; 32
     958:	ce 01       	movw	r24, r28
     95a:	08 96       	adiw	r24, 0x08	; 8
     95c:	0e 94 06 04 	call	0x80c	; 0x80c <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
     960:	ce 01       	movw	r24, r28
     962:	08 96       	adiw	r24, 0x08	; 8
     964:	0e 94 45 04 	call	0x88a	; 0x88a <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
     968:	ce 01       	movw	r24, r28
     96a:	08 96       	adiw	r24, 0x08	; 8
     96c:	0e 94 27 04 	call	0x84e	; 0x84e <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
     970:	6e 85       	ldd	r22, Y+14	; 0x0e
     972:	64 60       	ori	r22, 0x04	; 4
     974:	ce 01       	movw	r24, r28
     976:	08 96       	adiw	r24, 0x08	; 8
     978:	0e 94 06 04 	call	0x80c	; 0x80c <lq_sendCommand>
	
	lq_returnHome(&device);
     97c:	ce 01       	movw	r24, r28
     97e:	08 96       	adiw	r24, 0x08	; 8
     980:	0e 94 3b 04 	call	0x876	; 0x876 <lq_returnHome>

	return device;
     984:	87 e0       	ldi	r24, 0x07	; 7
     986:	fe 01       	movw	r30, r28
     988:	38 96       	adiw	r30, 0x08	; 8
     98a:	de 01       	movw	r26, r28
     98c:	11 96       	adiw	r26, 0x01	; 1
     98e:	01 90       	ld	r0, Z+
     990:	0d 92       	st	X+, r0
     992:	8a 95       	dec	r24
     994:	e1 f7       	brne	.-8      	; 0x98e <lq_init+0xf2>
     996:	29 81       	ldd	r18, Y+1	; 0x01
     998:	3a 81       	ldd	r19, Y+2	; 0x02
     99a:	4b 81       	ldd	r20, Y+3	; 0x03
     99c:	5c 81       	ldd	r21, Y+4	; 0x04
     99e:	6d 81       	ldd	r22, Y+5	; 0x05
     9a0:	7e 81       	ldd	r23, Y+6	; 0x06
};
     9a2:	8f 81       	ldd	r24, Y+7	; 0x07
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	2e 96       	adiw	r28, 0x0e	; 14
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <serial_init>:

#include "Serial_lib.h"

void serial_init()
{
	UCSRB = (1 << RXEN) | (1 << TXEN);
     9b8:	88 e1       	ldi	r24, 0x18	; 24
     9ba:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
     9bc:	80 b5       	in	r24, 0x20	; 32
     9be:	86 68       	ori	r24, 0x86	; 134
     9c0:	80 bd       	out	0x20, r24	; 32
	UBRRL = (int)((F_CPU / (SERIAL_BAUD_RATE * 16)) - 1);
     9c2:	83 e3       	ldi	r24, 0x33	; 51
     9c4:	89 b9       	out	0x09, r24	; 9
	
#if SERIAL_INTERRUPT == 1
	UCSRB |= (1<<RXCIE);
     9c6:	57 9a       	sbi	0x0a, 7	; 10
     9c8:	08 95       	ret

000009ca <serial_send_char>:
#endif
}

void serial_send_char(char c)
{
	UCSRA = 1 << TXC; // clear TXC bit
     9ca:	90 e4       	ldi	r25, 0x40	; 64
     9cc:	9b b9       	out	0x0b, r25	; 11
	UDR = c;
     9ce:	8c b9       	out	0x0c, r24	; 12
	while ((UCSRA & (1 << TXC)) == 0);
     9d0:	5e 9b       	sbis	0x0b, 6	; 11
     9d2:	fe cf       	rjmp	.-4      	; 0x9d0 <serial_send_char+0x6>
}
     9d4:	08 95       	ret

000009d6 <serial_send_string>:

void serial_send_string(char *s)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	ec 01       	movw	r28, r24
	while (*s != '\0')
     9dc:	88 81       	ld	r24, Y
     9de:	88 23       	and	r24, r24
     9e0:	31 f0       	breq	.+12     	; 0x9ee <serial_send_string+0x18>
     9e2:	21 96       	adiw	r28, 0x01	; 1
	{
		serial_send_char(*s);
     9e4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <serial_send_char>
	while ((UCSRA & (1 << TXC)) == 0);
}

void serial_send_string(char *s)
{
	while (*s != '\0')
     9e8:	89 91       	ld	r24, Y+
     9ea:	81 11       	cpse	r24, r1
     9ec:	fb cf       	rjmp	.-10     	; 0x9e4 <serial_send_string+0xe>
	{
		serial_send_char(*s);
		s++;
	}
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
     9f4:	81 b1       	in	r24, 0x01	; 1
}
     9f6:	88 7f       	andi	r24, 0xF8	; 248
     9f8:	08 95       	ret

000009fa <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     9fa:	84 ea       	ldi	r24, 0xA4	; 164
     9fc:	86 bf       	out	0x36, r24	; 54

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
     9fe:	06 b6       	in	r0, 0x36	; 54
     a00:	07 fe       	sbrs	r0, 7
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <TWI_BeginTransmission+0x4>
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
     a04:	81 b1       	in	r24, 0x01	; 1
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));

	//Return status register
	return (TWI_Status());
}
     a06:	88 7f       	andi	r24, 0xF8	; 248
     a08:	08 95       	ret

00000a0a <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
     a0a:	85 ed       	ldi	r24, 0xD5	; 213
     a0c:	86 bf       	out	0x36, r24	; 54

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
     a0e:	06 b6       	in	r0, 0x36	; 54
     a10:	04 fc       	sbrc	r0, 4
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <TWI_EndTransmission+0x4>
}
     a14:	08 95       	ret

00000a16 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
     a16:	83 b9       	out	0x03, r24	; 3

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
     a18:	84 e8       	ldi	r24, 0x84	; 132
     a1a:	86 bf       	out	0x36, r24	; 54

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
     a1c:	06 b6       	in	r0, 0x36	; 54
     a1e:	07 fe       	sbrs	r0, 7
     a20:	fd cf       	rjmp	.-6      	; 0xa1c <TWI_Transmit+0x6>
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
     a22:	81 b1       	in	r24, 0x01	; 1
	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));

	//Return status register
	return (TWI_Status());
}
     a24:	88 7f       	andi	r24, 0xF8	; 248
     a26:	08 95       	ret

00000a28 <TWI_ReceiveACK>:

//Wait until ACK received. 
uint8_t TWI_ReceiveACK(void)
{
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     a28:	84 ec       	ldi	r24, 0xC4	; 196
     a2a:	86 bf       	out	0x36, r24	; 54
	
	//Wait till reception is
	while (!BitCheck(TWCR, TWINT));
     a2c:	06 b6       	in	r0, 0x36	; 54
     a2e:	07 fe       	sbrs	r0, 7
     a30:	fd cf       	rjmp	.-6      	; 0xa2c <TWI_ReceiveACK+0x4>

	//Return received data
	return TWDR;
     a32:	83 b1       	in	r24, 0x03	; 3
}
     a34:	08 95       	ret

00000a36 <TWI_ReceiveNACK>:

//Wait until NACK received. 
uint8_t TWI_ReceiveNACK(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     a36:	84 e8       	ldi	r24, 0x84	; 132
     a38:	86 bf       	out	0x36, r24	; 54

	//Wait till reception is
	while (!BitCheck(TWCR, TWINT));
     a3a:	06 b6       	in	r0, 0x36	; 54
     a3c:	07 fe       	sbrs	r0, 7
     a3e:	fd cf       	rjmp	.-6      	; 0xa3a <TWI_ReceiveNACK+0x4>

	//Return received data
	return TWDR;
     a40:	83 b1       	in	r24, 0x03	; 3
}
     a42:	08 95       	ret

00000a44 <int1_init>:
DateTime_t t;

void int1_init(void)
{
	// alarm -> pull up
	SBIT(ALARM_PORT, ALARM_PIN);
     a44:	93 9a       	sbi	0x12, 3	; 18
	// INT1 -> falling edge
	MCUCR |= (1 << ISC11);
     a46:	85 b7       	in	r24, 0x35	; 53
     a48:	88 60       	ori	r24, 0x08	; 8
     a4a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
     a4c:	85 b7       	in	r24, 0x35	; 53
     a4e:	8b 7f       	andi	r24, 0xFB	; 251
     a50:	85 bf       	out	0x35, r24	; 53
	// INT1 -> interrupt enable
	GICR |= (1 << INT1);
     a52:	8b b7       	in	r24, 0x3b	; 59
     a54:	80 68       	ori	r24, 0x80	; 128
     a56:	8b bf       	out	0x3b, r24	; 59
     a58:	08 95       	ret

00000a5a <int2_init>:
}

void int2_init(void)
{
	// button -> pull up
	SBIT(BUTTON_PORT, BUTTON_PIN);
     a5a:	c2 9a       	sbi	0x18, 2	; 24
	// INT2 -> falling edge
	MCUCSR &= ~(1 << ISC2);
     a5c:	84 b7       	in	r24, 0x34	; 52
     a5e:	8f 7b       	andi	r24, 0xBF	; 191
     a60:	84 bf       	out	0x34, r24	; 52
	// INT2 -> interrupt enable
	GICR |= (1 << INT2);
     a62:	8b b7       	in	r24, 0x3b	; 59
     a64:	80 62       	ori	r24, 0x20	; 32
     a66:	8b bf       	out	0x3b, r24	; 59
     a68:	08 95       	ret

00000a6a <timer0_init>:
}

void timer0_init(void)
{
	// timer 0 -> interrupt enable
	TIMSK |= (1 << TOIE0);
     a6a:	89 b7       	in	r24, 0x39	; 57
     a6c:	81 60       	ori	r24, 0x01	; 1
     a6e:	89 bf       	out	0x39, r24	; 57
	// prescaler -> 1024
	TCCR0 = (1 << CS02) | (1 << CS00);
     a70:	85 e0       	ldi	r24, 0x05	; 5
     a72:	83 bf       	out	0x33, r24	; 51
	// 255 - 78 = 177 -> 10 ms
	TCNT0 = 177;
     a74:	81 eb       	ldi	r24, 0xB1	; 177
     a76:	82 bf       	out	0x32, r24	; 50
     a78:	08 95       	ret

00000a7a <timer1_init>:
}

void timer1_init(void)
{
	// timer 1 -> interrupt enable
	TIMSK |= (1 << TOIE1);
     a7a:	89 b7       	in	r24, 0x39	; 57
     a7c:	84 60       	ori	r24, 0x04	; 4
     a7e:	89 bf       	out	0x39, r24	; 57
	// prescaler -> 1024
	TCCR1B = (1 << CS12) | (1 << CS10);
     a80:	85 e0       	ldi	r24, 0x05	; 5
     a82:	8e bd       	out	0x2e, r24	; 46
	// 65535 - 7812 = 57723 -> 1 sec
	TCNT1 = 57723;
     a84:	8b e7       	ldi	r24, 0x7B	; 123
     a86:	91 ee       	ldi	r25, 0xE1	; 225
     a88:	9d bd       	out	0x2d, r25	; 45
     a8a:	8c bd       	out	0x2c, r24	; 44
     a8c:	08 95       	ret

00000a8e <stepper_init>:
}

void stepper_init(void)
{
	// stepper -> output
	SBIT(STEPPER_DDR, 3);
     a8e:	a3 9a       	sbi	0x14, 3	; 20
	SBIT(STEPPER_DDR, 4);
     a90:	a4 9a       	sbi	0x14, 4	; 20
	SBIT(STEPPER_DDR, 5);
     a92:	a5 9a       	sbi	0x14, 5	; 20
	SBIT(STEPPER_DDR, 6);
     a94:	a6 9a       	sbi	0x14, 6	; 20
     a96:	08 95       	ret

00000a98 <adc_init>:
}

void adc_init(void)
{
	// ADC -> input
	CBIT(ADC_DDR, ADC_PIN);
     a98:	d0 98       	cbi	0x1a, 0	; 26
	// ADC -> 2.56V reference voltage
	ADMUX |= (1 << REFS1) | (1 << REFS0);
     a9a:	87 b1       	in	r24, 0x07	; 7
     a9c:	80 6c       	ori	r24, 0xC0	; 192
     a9e:	87 b9       	out	0x07, r24	; 7
	// ADC -> ADC enable / interrupt enable / prescaler -> 128
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     aa0:	86 b1       	in	r24, 0x06	; 6
     aa2:	8f 68       	ori	r24, 0x8F	; 143
     aa4:	86 b9       	out	0x06, r24	; 6
     aa6:	08 95       	ret

00000aa8 <rtc_init>:
}

void rtc_init(void)
{
	// I2C -> init (400 kHz)
	i2c_master_init(I2C_SCL_FREQUENCY_400);
     aa8:	60 e8       	ldi	r22, 0x80	; 128
     aaa:	7a e1       	ldi	r23, 0x1A	; 26
     aac:	86 e0       	ldi	r24, 0x06	; 6
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 55 03 	call	0x6aa	; 0x6aa <i2c_master_init>

	// date time -> init (23:59:55 2024/12/31)
	t.Second = 55;
     ab4:	e7 ec       	ldi	r30, 0xC7	; 199
     ab6:	f1 e0       	ldi	r31, 0x01	; 1
     ab8:	87 e3       	ldi	r24, 0x37	; 55
     aba:	28 2f       	mov	r18, r24
     abc:	80 83       	st	Z, r24
	t.Minute = 59;
     abe:	8b e3       	ldi	r24, 0x3B	; 59
     ac0:	38 2f       	mov	r19, r24
     ac2:	81 83       	std	Z+1, r24	; 0x01
	t.Hour = 23;
     ac4:	87 e1       	ldi	r24, 0x17	; 23
     ac6:	48 2f       	mov	r20, r24
     ac8:	82 83       	std	Z+2, r24	; 0x02
	t.Day = Sunday;
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	58 2f       	mov	r21, r24
     ace:	83 83       	std	Z+3, r24	; 0x03
	t.Date = 31;
     ad0:	8f e1       	ldi	r24, 0x1F	; 31
     ad2:	68 2f       	mov	r22, r24
     ad4:	84 83       	std	Z+4, r24	; 0x04
	t.Month = 12;
     ad6:	8c e0       	ldi	r24, 0x0C	; 12
     ad8:	78 2f       	mov	r23, r24
     ada:	85 83       	std	Z+5, r24	; 0x05
	t.Year = 2024;
     adc:	88 ee       	ldi	r24, 0xE8	; 232
     ade:	86 83       	std	Z+6, r24	; 0x06
     ae0:	97 e0       	ldi	r25, 0x07	; 7
     ae2:	97 83       	std	Z+7, r25	; 0x07
	RTC_Set(t);
     ae4:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <t+0x7>
     ae8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <RTC_Set>
     aec:	08 95       	ret

00000aee <lcd_init>:
}

void lcd_init(void)
{
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	64 97       	sbiw	r28, 0x14	; 20
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
	// LCD -> init (A0 -> H, A1 -> H, A2 -> L)
	lcd = lq_init((0b01000110 >> 1), 16, 2, LCD_5x8DOTS);
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	42 e0       	ldi	r20, 0x02	; 2
     b0e:	60 e1       	ldi	r22, 0x10	; 16
     b10:	83 e2       	ldi	r24, 0x23	; 35
     b12:	0e 94 4e 04 	call	0x89c	; 0x89c <lq_init>
     b16:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <lcd>
     b1a:	30 93 d0 01 	sts	0x01D0, r19	; 0x8001d0 <lcd+0x1>
     b1e:	40 93 d1 01 	sts	0x01D1, r20	; 0x8001d1 <lcd+0x2>
     b22:	50 93 d2 01 	sts	0x01D2, r21	; 0x8001d2 <lcd+0x3>
     b26:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <lcd+0x4>
     b2a:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <lcd+0x5>
     b2e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <lcd+0x6>

	t = RTC_Get();
     b32:	0e 94 c8 01 	call	0x390	; 0x390 <RTC_Get>
     b36:	e7 ec       	ldi	r30, 0xC7	; 199
     b38:	f1 e0       	ldi	r31, 0x01	; 1
     b3a:	20 83       	st	Z, r18
     b3c:	31 83       	std	Z+1, r19	; 0x01
     b3e:	42 83       	std	Z+2, r20	; 0x02
     b40:	53 83       	std	Z+3, r21	; 0x03
     b42:	64 83       	std	Z+4, r22	; 0x04
     b44:	75 83       	std	Z+5, r23	; 0x05
     b46:	86 83       	std	Z+6, r24	; 0x06
     b48:	97 83       	std	Z+7, r25	; 0x07
	if (RTC_Status() == RTC_OK)
     b4a:	0e 94 59 00 	call	0xb2	; 0xb2 <RTC_Status>
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	09 f0       	breq	.+2      	; 0xb54 <lcd_init+0x66>
     b52:	49 c0       	rjmp	.+146    	; 0xbe6 <lcd_init+0xf8>
	{
		// LCD -> print time
		lq_setCursor(&lcd, 0, 0);
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	8f ec       	ldi	r24, 0xCF	; 207
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 0a 04 	call	0x814	; 0x814 <lq_setCursor>
		char time_arr[10];
		sprintf(time_arr, "%02d:%02d:%02d", t.Hour, t.Minute, t.Second);
     b60:	07 ec       	ldi	r16, 0xC7	; 199
     b62:	11 e0       	ldi	r17, 0x01	; 1
     b64:	f8 01       	movw	r30, r16
     b66:	80 81       	ld	r24, Z
     b68:	1f 92       	push	r1
     b6a:	8f 93       	push	r24
     b6c:	81 81       	ldd	r24, Z+1	; 0x01
     b6e:	1f 92       	push	r1
     b70:	8f 93       	push	r24
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	1f 92       	push	r1
     b76:	8f 93       	push	r24
     b78:	8f e6       	ldi	r24, 0x6F	; 111
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	7e 01       	movw	r14, r28
     b82:	fb e0       	ldi	r31, 0x0B	; 11
     b84:	ef 0e       	add	r14, r31
     b86:	f1 1c       	adc	r15, r1
     b88:	ff 92       	push	r15
     b8a:	ef 92       	push	r14
     b8c:	0e 94 22 0c 	call	0x1844	; 0x1844 <sprintf>
		lq_print(&lcd, time_arr);
     b90:	b7 01       	movw	r22, r14
     b92:	8f ec       	ldi	r24, 0xCF	; 207
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <lq_print>

		// LCD -> print date
		lq_setCursor(&lcd, 1, 0);
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	8f ec       	ldi	r24, 0xCF	; 207
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	0e 94 0a 04 	call	0x814	; 0x814 <lq_setCursor>
		char date_arr[10];
		sprintf(date_arr, "%02d/%02d/%02d", t.Year, t.Month, t.Date);
     ba6:	f8 01       	movw	r30, r16
     ba8:	84 81       	ldd	r24, Z+4	; 0x04
     baa:	1f 92       	push	r1
     bac:	8f 93       	push	r24
     bae:	85 81       	ldd	r24, Z+5	; 0x05
     bb0:	1f 92       	push	r1
     bb2:	8f 93       	push	r24
     bb4:	87 81       	ldd	r24, Z+7	; 0x07
     bb6:	8f 93       	push	r24
     bb8:	86 81       	ldd	r24, Z+6	; 0x06
     bba:	8f 93       	push	r24
     bbc:	8e e7       	ldi	r24, 0x7E	; 126
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	8e 01       	movw	r16, r28
     bc6:	0f 5f       	subi	r16, 0xFF	; 255
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
     bca:	1f 93       	push	r17
     bcc:	0f 93       	push	r16
     bce:	0e 94 22 0c 	call	0x1844	; 0x1844 <sprintf>
		lq_print(&lcd, date_arr);
     bd2:	b8 01       	movw	r22, r16
     bd4:	8f ec       	ldi	r24, 0xCF	; 207
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <lq_print>
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
	}
}
     be6:	64 96       	adiw	r28, 0x14	; 20
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	08 95       	ret

00000c00 <alarm_init>:

void alarm_init(void)
{
     c00:	0f 93       	push	r16
	// buzzer -> output
	SBIT(BUZZER_DDR, BUZZER_PIN);
     c02:	8f 9a       	sbi	0x11, 7	; 17
	// alarm -> 00:00:00
	RTC_AlarmSet(Alarm1_Match_Hours, 0, 0, 0, 0);
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	88 e0       	ldi	r24, 0x08	; 8
     c0e:	0e 94 29 02 	call	0x452	; 0x452 <RTC_AlarmSet>
	// alarm -> interrupt enable
	RTC_AlarmInterrupt(Alarm_1, 1);
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	0e 94 6e 02 	call	0x4dc	; 0x4dc <RTC_AlarmInterrupt>
}
     c1a:	0f 91       	pop	r16
     c1c:	08 95       	ret

00000c1e <init>:

void init(void)
{
	int1_init();
     c1e:	0e 94 22 05 	call	0xa44	; 0xa44 <int1_init>
	int2_init();
     c22:	0e 94 2d 05 	call	0xa5a	; 0xa5a <int2_init>
	timer0_init();
     c26:	0e 94 35 05 	call	0xa6a	; 0xa6a <timer0_init>
	timer1_init();
     c2a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <timer1_init>
	stepper_init();
     c2e:	0e 94 47 05 	call	0xa8e	; 0xa8e <stepper_init>
	adc_init();
     c32:	0e 94 4c 05 	call	0xa98	; 0xa98 <adc_init>
	rtc_init();
     c36:	0e 94 54 05 	call	0xaa8	; 0xaa8 <rtc_init>
	lcd_init();
     c3a:	0e 94 77 05 	call	0xaee	; 0xaee <lcd_init>
	alarm_init();
     c3e:	0e 94 00 06 	call	0xc00	; 0xc00 <alarm_init>
	serial_init();
     c42:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <serial_init>
	ultrasonic_init();
     c46:	0e 94 93 02 	call	0x526	; 0x526 <ultrasonic_init>
     c4a:	08 95       	ret

00000c4c <split_string_by_space>:
}

void split_string_by_space(void)
{
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	c0 55       	subi	r28, 0x50	; 80
     c6a:	d1 09       	sbc	r29, r1
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
	char first_word[20], second_word[20], third_word[20], fourth_word[20];

	// clear all arrays
	strcpy(first_word, "");
     c76:	19 82       	std	Y+1, r1	; 0x01
	strcpy(second_word, "");
     c78:	1d 8a       	std	Y+21, r1	; 0x15
	strcpy(third_word, "");
     c7a:	19 a6       	std	Y+41, r1	; 0x29
	strcpy(fourth_word, "");
     c7c:	1d ae       	std	Y+61, r1	; 0x3d
	strcpy(cmd_key, "");
     c7e:	0f 2e       	mov	r0, r31
     c80:	f7 e5       	ldi	r31, 0x57	; 87
     c82:	af 2e       	mov	r10, r31
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	bf 2e       	mov	r11, r31
     c88:	f0 2d       	mov	r31, r0
     c8a:	f5 01       	movw	r30, r10
     c8c:	10 82       	st	Z, r1
	strcpy(cmd_first_value, "");
     c8e:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <cmd_first_value>
	strcpy(cmd_second_value, "");
     c92:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <cmd_second_value>

	// store each word of command in its variable
	sscanf(command, "%s %s %s %s", first_word, second_word, third_word, fourth_word);
     c96:	7e 01       	movw	r14, r28
     c98:	fd e3       	ldi	r31, 0x3D	; 61
     c9a:	ef 0e       	add	r14, r31
     c9c:	f1 1c       	adc	r15, r1
     c9e:	ff 92       	push	r15
     ca0:	ef 92       	push	r14
     ca2:	6e 01       	movw	r12, r28
     ca4:	89 e2       	ldi	r24, 0x29	; 41
     ca6:	c8 0e       	add	r12, r24
     ca8:	d1 1c       	adc	r13, r1
     caa:	df 92       	push	r13
     cac:	cf 92       	push	r12
     cae:	8e 01       	movw	r16, r28
     cb0:	0b 5e       	subi	r16, 0xEB	; 235
     cb2:	1f 4f       	sbci	r17, 0xFF	; 255
     cb4:	1f 93       	push	r17
     cb6:	0f 93       	push	r16
     cb8:	fe 01       	movw	r30, r28
     cba:	31 96       	adiw	r30, 0x01	; 1
     cbc:	4f 01       	movw	r8, r30
     cbe:	ff 93       	push	r31
     cc0:	ef 93       	push	r30
     cc2:	8d e8       	ldi	r24, 0x8D	; 141
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	9f 93       	push	r25
     cc8:	8f 93       	push	r24
     cca:	87 ed       	ldi	r24, 0xD7	; 215
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	0e 94 44 0c 	call	0x1888	; 0x1888 <sscanf>

	// combine first two words of command and store as key
	sprintf(cmd_key, "%s %s", first_word, second_word);
     cd6:	1f 93       	push	r17
     cd8:	0f 93       	push	r16
     cda:	9f 92       	push	r9
     cdc:	8f 92       	push	r8
     cde:	83 e9       	ldi	r24, 0x93	; 147
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	bf 92       	push	r11
     ce8:	af 92       	push	r10
     cea:	0e 94 22 0c 	call	0x1844	; 0x1844 <sprintf>
	// store third word of command as first value
	sprintf(cmd_first_value, "%s", third_word);
     cee:	b6 01       	movw	r22, r12
     cf0:	8b e6       	ldi	r24, 0x6B	; 107
     cf2:	92 e0       	ldi	r25, 0x02	; 2
     cf4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <strcpy>
	// store fourth word of command as second value
	sprintf(cmd_second_value, "%s", fourth_word);
     cf8:	b7 01       	movw	r22, r14
     cfa:	8f e3       	ldi	r24, 0x3F	; 63
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 1b 0c 	call	0x1836	; 0x1836 <strcpy>
}
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	c0 5b       	subi	r28, 0xB0	; 176
     d0e:	df 4f       	sbci	r29, 0xFF	; 255
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	df 90       	pop	r13
     d28:	cf 90       	pop	r12
     d2a:	bf 90       	pop	r11
     d2c:	af 90       	pop	r10
     d2e:	9f 90       	pop	r9
     d30:	8f 90       	pop	r8
     d32:	08 95       	ret

00000d34 <rotate_stepper>:

void rotate_stepper(int steps, int direction)
{
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	28 97       	sbiw	r28, 0x08	; 8
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	8c 01       	movw	r16, r24
	// steps -> shifed 3 units to the left
	int step_sequence[4] = {0x20, 0x10, 0x40, 0x08};
     d52:	88 e0       	ldi	r24, 0x08	; 8
     d54:	e7 e6       	ldi	r30, 0x67	; 103
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	de 01       	movw	r26, r28
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	01 90       	ld	r0, Z+
     d5e:	0d 92       	st	X+, r0
     d60:	8a 95       	dec	r24
     d62:	e1 f7       	brne	.-8      	; 0xd5c <rotate_stepper+0x28>
	for (int i = 0; i < steps; i++)
     d64:	10 16       	cp	r1, r16
     d66:	11 06       	cpc	r1, r17
     d68:	cc f5       	brge	.+114    	; 0xddc <rotate_stepper+0xa8>
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	ae 01       	movw	r20, r28
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	7e 01       	movw	r14, r28
     d76:	89 e0       	ldi	r24, 0x09	; 9
     d78:	e8 0e       	add	r14, r24
     d7a:	f1 1c       	adc	r15, r1
	{
		// stepper motor -> clockwise rotation
		if (direction == CW)
     d7c:	61 30       	cpi	r22, 0x01	; 1
     d7e:	71 05       	cpc	r23, r1
     d80:	39 f5       	brne	.+78     	; 0xdd0 <rotate_stepper+0x9c>
     d82:	fe 01       	movw	r30, r28
     d84:	31 96       	adiw	r30, 0x01	; 1
		{
			for (int step = 0; step < 4; step++)
			{
				STEPPER_PORT = step_sequence[step];
     d86:	90 81       	ld	r25, Z
     d88:	32 96       	adiw	r30, 0x02	; 2
     d8a:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d8c:	9f e7       	ldi	r25, 0x7F	; 127
     d8e:	a8 e3       	ldi	r26, 0x38	; 56
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	91 50       	subi	r25, 0x01	; 1
     d94:	a0 40       	sbci	r26, 0x00	; 0
     d96:	80 40       	sbci	r24, 0x00	; 0
     d98:	e1 f7       	brne	.-8      	; 0xd92 <rotate_stepper+0x5e>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <rotate_stepper+0x68>
     d9c:	00 00       	nop
	for (int i = 0; i < steps; i++)
	{
		// stepper motor -> clockwise rotation
		if (direction == CW)
		{
			for (int step = 0; step < 4; step++)
     d9e:	ee 15       	cp	r30, r14
     da0:	ff 05       	cpc	r31, r15
     da2:	89 f7       	brne	.-30     	; 0xd86 <rotate_stepper+0x52>
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <rotate_stepper+0x90>
     da6:	32 97       	sbiw	r30, 0x02	; 2
		// stepper motor -> counter clockwise rotation
		if (direction == CCW)
		{
			for (int step = 3; step >= 0; step--)
			{
				STEPPER_PORT = step_sequence[step];
     da8:	90 81       	ld	r25, Z
     daa:	95 bb       	out	0x15, r25	; 21
     dac:	9f e7       	ldi	r25, 0x7F	; 127
     dae:	a8 e3       	ldi	r26, 0x38	; 56
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	91 50       	subi	r25, 0x01	; 1
     db4:	a0 40       	sbci	r26, 0x00	; 0
     db6:	80 40       	sbci	r24, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <rotate_stepper+0x7e>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <rotate_stepper+0x88>
     dbc:	00 00       	nop
		}

		// stepper motor -> counter clockwise rotation
		if (direction == CCW)
		{
			for (int step = 3; step >= 0; step--)
     dbe:	4e 17       	cp	r20, r30
     dc0:	5f 07       	cpc	r21, r31
     dc2:	89 f7       	brne	.-30     	; 0xda6 <rotate_stepper+0x72>

void rotate_stepper(int steps, int direction)
{
	// steps -> shifed 3 units to the left
	int step_sequence[4] = {0x20, 0x10, 0x40, 0x08};
	for (int i = 0; i < steps; i++)
     dc4:	2f 5f       	subi	r18, 0xFF	; 255
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	02 17       	cp	r16, r18
     dca:	13 07       	cpc	r17, r19
     dcc:	b9 f6       	brne	.-82     	; 0xd7c <rotate_stepper+0x48>
     dce:	06 c0       	rjmp	.+12     	; 0xddc <rotate_stepper+0xa8>
				_delay_ms(50);
			}
		}

		// stepper motor -> counter clockwise rotation
		if (direction == CCW)
     dd0:	61 15       	cp	r22, r1
     dd2:	71 05       	cpc	r23, r1
     dd4:	b9 f7       	brne	.-18     	; 0xdc4 <rotate_stepper+0x90>
     dd6:	fe 01       	movw	r30, r28
     dd8:	39 96       	adiw	r30, 0x09	; 9
     dda:	e5 cf       	rjmp	.-54     	; 0xda6 <rotate_stepper+0x72>
				STEPPER_PORT = step_sequence[step];
				_delay_ms(50);
			}
		}
	}
}
     ddc:	28 96       	adiw	r28, 0x08	; 8
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	08 95       	ret

00000df6 <adc_read>:

void adc_read(void)
{
	// ADC -> start conversion
	ADCSRA |= (1 << ADSC);
     df6:	36 9a       	sbi	0x06, 6	; 6
     df8:	08 95       	ret

00000dfa <lcd_render>:
}

void lcd_render(void)
{
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	ec 97       	sbiw	r28, 0x3c	; 60
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
	t = RTC_Get();
     e16:	0e 94 c8 01 	call	0x390	; 0x390 <RTC_Get>
     e1a:	e7 ec       	ldi	r30, 0xC7	; 199
     e1c:	f1 e0       	ldi	r31, 0x01	; 1
     e1e:	20 83       	st	Z, r18
     e20:	31 83       	std	Z+1, r19	; 0x01
     e22:	42 83       	std	Z+2, r20	; 0x02
     e24:	53 83       	std	Z+3, r21	; 0x03
     e26:	64 83       	std	Z+4, r22	; 0x04
     e28:	75 83       	std	Z+5, r23	; 0x05
     e2a:	86 83       	std	Z+6, r24	; 0x06
     e2c:	97 83       	std	Z+7, r25	; 0x07
	if (RTC_Status() == RTC_OK)
     e2e:	0e 94 59 00 	call	0xb2	; 0xb2 <RTC_Status>
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	09 f0       	breq	.+2      	; 0xe38 <lcd_render+0x3e>
     e36:	49 c0       	rjmp	.+146    	; 0xeca <lcd_render+0xd0>
	{
		// LCD -> print time
		lq_setCursor(&lcd, 0, 0);
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	8f ec       	ldi	r24, 0xCF	; 207
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 0a 04 	call	0x814	; 0x814 <lq_setCursor>
		char time_arr[20];
		sprintf(time_arr, "%02d:%02d:%02d", t.Hour, t.Minute, t.Second);
     e44:	07 ec       	ldi	r16, 0xC7	; 199
     e46:	11 e0       	ldi	r17, 0x01	; 1
     e48:	f8 01       	movw	r30, r16
     e4a:	80 81       	ld	r24, Z
     e4c:	1f 92       	push	r1
     e4e:	8f 93       	push	r24
     e50:	81 81       	ldd	r24, Z+1	; 0x01
     e52:	1f 92       	push	r1
     e54:	8f 93       	push	r24
     e56:	82 81       	ldd	r24, Z+2	; 0x02
     e58:	1f 92       	push	r1
     e5a:	8f 93       	push	r24
     e5c:	8f e6       	ldi	r24, 0x6F	; 111
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9f 93       	push	r25
     e62:	8f 93       	push	r24
     e64:	7e 01       	movw	r14, r28
     e66:	f9 e2       	ldi	r31, 0x29	; 41
     e68:	ef 0e       	add	r14, r31
     e6a:	f1 1c       	adc	r15, r1
     e6c:	ff 92       	push	r15
     e6e:	ef 92       	push	r14
     e70:	0e 94 22 0c 	call	0x1844	; 0x1844 <sprintf>
		lq_print(&lcd, time_arr);
     e74:	b7 01       	movw	r22, r14
     e76:	8f ec       	ldi	r24, 0xCF	; 207
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <lq_print>

		// LCD -> print date
		lq_setCursor(&lcd, 1, 0);
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	8f ec       	ldi	r24, 0xCF	; 207
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 0a 04 	call	0x814	; 0x814 <lq_setCursor>
		char date_arr[20];
		sprintf(date_arr, "%02d/%02d/%02d", t.Year, t.Month, t.Date);
     e8a:	f8 01       	movw	r30, r16
     e8c:	84 81       	ldd	r24, Z+4	; 0x04
     e8e:	1f 92       	push	r1
     e90:	8f 93       	push	r24
     e92:	85 81       	ldd	r24, Z+5	; 0x05
     e94:	1f 92       	push	r1
     e96:	8f 93       	push	r24
     e98:	87 81       	ldd	r24, Z+7	; 0x07
     e9a:	8f 93       	push	r24
     e9c:	86 81       	ldd	r24, Z+6	; 0x06
     e9e:	8f 93       	push	r24
     ea0:	8e e7       	ldi	r24, 0x7E	; 126
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	8e 01       	movw	r16, r28
     eaa:	0b 5e       	subi	r16, 0xEB	; 235
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	1f 93       	push	r17
     eb0:	0f 93       	push	r16
     eb2:	0e 94 22 0c 	call	0x1844	; 0x1844 <sprintf>
		lq_print(&lcd, date_arr);
     eb6:	b8 01       	movw	r22, r16
     eb8:	8f ec       	ldi	r24, 0xCF	; 207
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <lq_print>
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
	}

	// LCD -> print temperature
	char temp_arr[10];
	sprintf(temp_arr, "%2d\xDF" "C", temp_integer);
     eca:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <temp_integer>
     ece:	1f 92       	push	r1
     ed0:	8f 93       	push	r24
     ed2:	89 e9       	ldi	r24, 0x99	; 153
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9f 93       	push	r25
     ed8:	8f 93       	push	r24
     eda:	8e 01       	movw	r16, r28
     edc:	0f 5f       	subi	r16, 0xFF	; 255
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	1f 93       	push	r17
     ee2:	0f 93       	push	r16
     ee4:	0e 94 22 0c 	call	0x1844	; 0x1844 <sprintf>
	lq_setCursor(&lcd, 1, 12);
     ee8:	4c e0       	ldi	r20, 0x0C	; 12
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	8f ec       	ldi	r24, 0xCF	; 207
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	0e 94 0a 04 	call	0x814	; 0x814 <lq_setCursor>
	lq_print(&lcd, temp_arr);
     ef4:	b8 01       	movw	r22, r16
     ef6:	8f ec       	ldi	r24, 0xCF	; 207
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <lq_print>

	// LCD -> print distance
	char distance_arr[10];
	sprintf(distance_arr, "%3lu" "cm", distance);
     efe:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <distance+0x3>
     f02:	8f 93       	push	r24
     f04:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <distance+0x2>
     f08:	8f 93       	push	r24
     f0a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <distance+0x1>
     f0e:	8f 93       	push	r24
     f10:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <distance>
     f14:	8f 93       	push	r24
     f16:	8f e9       	ldi	r24, 0x9F	; 159
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9f 93       	push	r25
     f1c:	8f 93       	push	r24
     f1e:	06 5f       	subi	r16, 0xF6	; 246
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	1f 93       	push	r17
     f24:	0f 93       	push	r16
     f26:	0e 94 22 0c 	call	0x1844	; 0x1844 <sprintf>
	lq_setCursor(&lcd, 0, 11);
     f2a:	4b e0       	ldi	r20, 0x0B	; 11
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	8f ec       	ldi	r24, 0xCF	; 207
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 0a 04 	call	0x814	; 0x814 <lq_setCursor>
	lq_print(&lcd, distance_arr);
     f36:	b8 01       	movw	r22, r16
     f38:	8f ec       	ldi	r24, 0xCF	; 207
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <lq_print>
}
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	ec 96       	adiw	r28, 0x3c	; 60
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	08 95       	ret

00000f64 <distance_check>:

void distance_check(void)
{
	// SR04 -> get distance
	distance = ultrasonic_triger();
     f64:	0e 94 9b 02 	call	0x536	; 0x536 <ultrasonic_triger>
     f68:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <distance>
     f6c:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <distance+0x1>
     f70:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <distance+0x2>
     f74:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <distance+0x3>

	// open box lid if distance is 20 cm or less
	if (distance <= 20 && distance > 0)
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	a1 09       	sbc	r26, r1
     f80:	b1 09       	sbc	r27, r1
     f82:	44 97       	sbiw	r24, 0x14	; 20
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	18 f4       	brcc	.+6      	; 0xf90 <distance_check+0x2c>
	{
		box = true;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <box>
     f90:	08 95       	ret

00000f92 <rtc_set_time>:
	}
}

void rtc_set_time(char *time, char *date)
{
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	2c 97       	sbiw	r28, 0x0c	; 12
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	16 2f       	mov	r17, r22
     fac:	07 2f       	mov	r16, r23
	int hour, minute, second;
	int day, month, year;

	// store date and time in its variables
	sscanf(time, "%d:%d:%d", &hour, &minute, &second);
     fae:	9e 01       	movw	r18, r28
     fb0:	2b 5f       	subi	r18, 0xFB	; 251
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	3f 93       	push	r19
     fb6:	2f 93       	push	r18
     fb8:	22 50       	subi	r18, 0x02	; 2
     fba:	31 09       	sbc	r19, r1
     fbc:	3f 93       	push	r19
     fbe:	2f 93       	push	r18
     fc0:	22 50       	subi	r18, 0x02	; 2
     fc2:	31 09       	sbc	r19, r1
     fc4:	3f 93       	push	r19
     fc6:	2f 93       	push	r18
     fc8:	26 ea       	ldi	r18, 0xA6	; 166
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3f 93       	push	r19
     fce:	2f 93       	push	r18
     fd0:	9f 93       	push	r25
     fd2:	8f 93       	push	r24
     fd4:	0e 94 44 0c 	call	0x1888	; 0x1888 <sscanf>
	sscanf(date, "%d/%d/%d", &month, &day, &year);
     fd8:	ce 01       	movw	r24, r28
     fda:	0b 96       	adiw	r24, 0x0b	; 11
     fdc:	9f 93       	push	r25
     fde:	8f 93       	push	r24
     fe0:	04 97       	sbiw	r24, 0x04	; 4
     fe2:	9f 93       	push	r25
     fe4:	8f 93       	push	r24
     fe6:	02 96       	adiw	r24, 0x02	; 2
     fe8:	9f 93       	push	r25
     fea:	8f 93       	push	r24
     fec:	8f ea       	ldi	r24, 0xAF	; 175
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9f 93       	push	r25
     ff2:	8f 93       	push	r24
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	0e 94 44 0c 	call	0x1888	; 0x1888 <sscanf>

	// create date and time struct
	t.Second = second;
     ffc:	e7 ec       	ldi	r30, 0xC7	; 199
     ffe:	f1 e0       	ldi	r31, 0x01	; 1
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	28 2f       	mov	r18, r24
    1004:	80 83       	st	Z, r24
	t.Minute = minute;
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	38 2f       	mov	r19, r24
    100a:	81 83       	std	Z+1, r24	; 0x01
	t.Hour = hour;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	48 2f       	mov	r20, r24
    1010:	82 83       	std	Z+2, r24	; 0x02
	t.Day = Sunday;
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	58 2f       	mov	r21, r24
    1016:	83 83       	std	Z+3, r24	; 0x03
	t.Date = day;
    1018:	8f 81       	ldd	r24, Y+7	; 0x07
    101a:	68 2f       	mov	r22, r24
    101c:	84 83       	std	Z+4, r24	; 0x04
	t.Month = month;
    101e:	89 85       	ldd	r24, Y+9	; 0x09
    1020:	78 2f       	mov	r23, r24
    1022:	85 83       	std	Z+5, r24	; 0x05
	t.Year = year + 2000;
    1024:	8b 85       	ldd	r24, Y+11	; 0x0b
    1026:	9c 85       	ldd	r25, Y+12	; 0x0c
    1028:	80 53       	subi	r24, 0x30	; 48
    102a:	98 4f       	sbci	r25, 0xF8	; 248
    102c:	97 83       	std	Z+7, r25	; 0x07
    102e:	86 83       	std	Z+6, r24	; 0x06
	RTC_Set(t);
    1030:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <t+0x7>
    1034:	0e 94 74 01 	call	0x2e8	; 0x2e8 <RTC_Set>
}
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	2c 96       	adiw	r28, 0x0c	; 12
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	08 95       	ret

00001058 <command_set_time>:

void command_set_time(void)
{
	// set input date and time and print on lcd
	rtc_set_time(cmd_first_value, cmd_second_value);
    1058:	6f e3       	ldi	r22, 0x3F	; 63
    105a:	72 e0       	ldi	r23, 0x02	; 2
    105c:	8b e6       	ldi	r24, 0x6B	; 107
    105e:	92 e0       	ldi	r25, 0x02	; 2
    1060:	0e 94 c9 07 	call	0xf92	; 0xf92 <rtc_set_time>
	lcd_render();
    1064:	0e 94 fd 06 	call	0xdfa	; 0xdfa <lcd_render>
	serial_send_string("\rDone!\r");
    1068:	88 eb       	ldi	r24, 0xB8	; 184
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>
    1070:	08 95       	ret

00001072 <command_set_alarm>:
}

void command_set_alarm(void)
{
    1072:	0f 93       	push	r16
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	00 d0       	rcall	.+0      	; 0x107a <command_set_alarm+0x8>
    107a:	00 d0       	rcall	.+0      	; 0x107c <command_set_alarm+0xa>
    107c:	00 d0       	rcall	.+0      	; 0x107e <command_set_alarm+0xc>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    int hour, minute, second;

    // set input time as alarm
    sscanf(cmd_first_value, "%d:%d:%d", &hour, &minute, &second);
    1082:	ce 01       	movw	r24, r28
    1084:	05 96       	adiw	r24, 0x05	; 5
    1086:	9f 93       	push	r25
    1088:	8f 93       	push	r24
    108a:	02 97       	sbiw	r24, 0x02	; 2
    108c:	9f 93       	push	r25
    108e:	8f 93       	push	r24
    1090:	02 97       	sbiw	r24, 0x02	; 2
    1092:	9f 93       	push	r25
    1094:	8f 93       	push	r24
    1096:	86 ea       	ldi	r24, 0xA6	; 166
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9f 93       	push	r25
    109c:	8f 93       	push	r24
    109e:	8b e6       	ldi	r24, 0x6B	; 107
    10a0:	92 e0       	ldi	r25, 0x02	; 2
    10a2:	9f 93       	push	r25
    10a4:	8f 93       	push	r24
    10a6:	0e 94 44 0c 	call	0x1888	; 0x1888 <sscanf>
    RTC_AlarmSet(Alarm1_Match_Hours, 0, hour, minute, second);
    10aa:	0d 81       	ldd	r16, Y+5	; 0x05
    10ac:	2b 81       	ldd	r18, Y+3	; 0x03
    10ae:	49 81       	ldd	r20, Y+1	; 0x01
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	88 e0       	ldi	r24, 0x08	; 8
    10b4:	0e 94 29 02 	call	0x452	; 0x452 <RTC_AlarmSet>
    serial_send_string("\rDone!\r");
    10b8:	88 eb       	ldi	r24, 0xB8	; 184
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>
}
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	26 96       	adiw	r28, 0x06	; 6
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	0f 91       	pop	r16
    10dc:	08 95       	ret

000010de <command_help>:

void command_help(void)
{
	// print help menu
	serial_send_string("\r******  << Help >>  ******\r");
    10de:	80 ec       	ldi	r24, 0xC0	; 192
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>
	serial_send_string("\r   set time HH:MM:SS MM/DD/YY\r");
    10e6:	8d ed       	ldi	r24, 0xDD	; 221
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>
	serial_send_string("-> Sets the desired time\r");
    10ee:	8d ef       	ldi	r24, 0xFD	; 253
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>
	serial_send_string("\r   set alarm HH:MM:SS\r");
    10f6:	87 e1       	ldi	r24, 0x17	; 23
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>
	serial_send_string("-> Sets the desired alarm\r");
    10fe:	8f e2       	ldi	r24, 0x2F	; 47
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>
    1106:	08 95       	ret

00001108 <open_box>:
}

void open_box(void)
{
	// open box lid if it's not already
	if (!is_open)
    1108:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <is_open>
    110c:	81 11       	cpse	r24, r1
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <open_box+0x1a>
	{
		rotate_stepper(4, CW);
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 9a 06 	call	0xd34	; 0xd34 <rotate_stepper>
		is_open = true;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <is_open>
    1122:	08 95       	ret

00001124 <close_box>:
}

void close_box(void)
{
	// close box lid if it's not already
	if (is_open)
    1124:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <is_open>
    1128:	88 23       	and	r24, r24
    112a:	41 f0       	breq	.+16     	; 0x113c <close_box+0x18>
	{
		rotate_stepper(4, CCW);
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 9a 06 	call	0xd34	; 0xd34 <rotate_stepper>
		is_open = false;
    1138:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <is_open>
    113c:	08 95       	ret

0000113e <button_pressed>:
}

void button_pressed(void)
{
	// open box lid - manual mode -> ON
	if (!is_open)
    113e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <is_open>
    1142:	81 11       	cpse	r24, r1
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <button_pressed+0x14>
	{
		manual = true;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <manual>
		open_box();
    114c:	0e 94 84 08 	call	0x1108	; 0x1108 <open_box>
    1150:	08 95       	ret
	}
	// close box lid - manual mode -> OFF
	else
	{
		close_box();
    1152:	0e 94 92 08 	call	0x1124	; 0x1124 <close_box>
		manual = false;
    1156:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <manual>
    115a:	08 95       	ret

0000115c <stop_alarm>:
}

void stop_alarm(void)
{
	// alarm -> interrupt disable
	RTC_AlarmCheck(Alarm_1);
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <RTC_AlarmCheck>
	// buzzer -> OFF
	CBIT(BUZZER_PORT, BUZZER_PIN);
    1162:	97 98       	cbi	0x12, 7	; 18
    1164:	08 95       	ret

00001166 <get_cmd>:

void get_cmd(char c)
{
	static uint8_t index = 0;

	if (c == '\r')
    1166:	8d 30       	cpi	r24, 0x0D	; 13
    1168:	39 f4       	brne	.+14     	; 0x1178 <get_cmd+0x12>
	{
		command[index] = '\0';
    116a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <index.2642>
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	e9 52       	subi	r30, 0x29	; 41
    1172:	fe 4f       	sbci	r31, 0xFE	; 254
    1174:	10 82       	st	Z, r1
    1176:	09 c0       	rjmp	.+18     	; 0x118a <get_cmd+0x24>
	}
	else
	{
		command[index] = c;
    1178:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <index.2642>
    117c:	e9 2f       	mov	r30, r25
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	e9 52       	subi	r30, 0x29	; 41
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
    1184:	80 83       	st	Z, r24
	}

	if (command[index] == '\0')
    1186:	81 11       	cpse	r24, r1
    1188:	35 c0       	rjmp	.+106    	; 0x11f4 <get_cmd+0x8e>
	{
		split_string_by_space();
    118a:	0e 94 26 06 	call	0xc4c	; 0xc4c <split_string_by_space>

		if (strcmp(cmd_key, cmd_set_time) == 0)
    118e:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <cmd_set_time>
    1192:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <cmd_set_time+0x1>
    1196:	87 e5       	ldi	r24, 0x57	; 87
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	0e 94 12 0c 	call	0x1824	; 0x1824 <strcmp>
    119e:	89 2b       	or	r24, r25
    11a0:	21 f4       	brne	.+8      	; 0x11aa <get_cmd+0x44>
		{
			set_time = true;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <set_time>
    11a8:	20 c0       	rjmp	.+64     	; 0x11ea <get_cmd+0x84>
		}
		else if (strcmp(cmd_key, cmd_set_alarm) == 0)
    11aa:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <cmd_set_alarm>
    11ae:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <cmd_set_alarm+0x1>
    11b2:	87 e5       	ldi	r24, 0x57	; 87
    11b4:	92 e0       	ldi	r25, 0x02	; 2
    11b6:	0e 94 12 0c 	call	0x1824	; 0x1824 <strcmp>
    11ba:	89 2b       	or	r24, r25
    11bc:	21 f4       	brne	.+8      	; 0x11c6 <get_cmd+0x60>
		{
    		set_alarm = true;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <set_alarm>
    11c4:	12 c0       	rjmp	.+36     	; 0x11ea <get_cmd+0x84>
		}
		else if (strcmp(command, cmd_help) == 0)
    11c6:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <cmd_help>
    11ca:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <cmd_help+0x1>
    11ce:	87 ed       	ldi	r24, 0xD7	; 215
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	0e 94 12 0c 	call	0x1824	; 0x1824 <strcmp>
    11d6:	89 2b       	or	r24, r25
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <get_cmd+0x7c>
		{
			help = true;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <help>
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <get_cmd+0x84>
		}
		else
		{
			serial_send_string("\rInvalid input!\r");
    11e2:	8a e4       	ldi	r24, 0x4A	; 74
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>
		}
		strcpy(command, "");
    11ea:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <command>
		index = 0;
    11ee:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <index.2642>
    11f2:	08 95       	ret
	}
	else
	{
		index++;
    11f4:	9f 5f       	subi	r25, 0xFF	; 255
    11f6:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <index.2642>
    11fa:	08 95       	ret

000011fc <main>:
	}
}

int main(void)
{
	init();
    11fc:	0e 94 0f 06 	call	0xc1e	; 0xc1e <init>

	serial_send_string("Hello there!\r");
    1200:	8b e5       	ldi	r24, 0x5B	; 91
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>
	serial_send_string("Write help for list of commands.\r");
    1208:	89 e6       	ldi	r24, 0x69	; 105
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <serial_send_string>

	sei();
    1210:	78 94       	sei

	while (1)
	{
		if (half_second)
    1212:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <half_second>
    1216:	88 23       	and	r24, r24
    1218:	51 f0       	breq	.+20     	; 0x122e <main+0x32>
		{
			if (!manual)
    121a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <manual>
    121e:	81 11       	cpse	r24, r1
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <main+0x2a>
			{
				distance_check();
    1222:	0e 94 b2 07 	call	0xf64	; 0xf64 <distance_check>
			}
			counter_ultrasonic = 0;
    1226:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <counter_ultrasonic>
			half_second = false;
    122a:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <half_second>
		}

		if (one_second)
    122e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <one_second>
    1232:	88 23       	and	r24, r24
    1234:	41 f0       	breq	.+16     	; 0x1246 <main+0x4a>
		{
			adc_read();
    1236:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <adc_read>
			lcd_render();
    123a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <lcd_render>
			counter_time = 0;
    123e:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <counter_time>
			one_second = false;
    1242:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <one_second>
		}

		if (three_second)
    1246:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <three_second>
    124a:	88 23       	and	r24, r24
    124c:	41 f0       	breq	.+16     	; 0x125e <main+0x62>
		{
			stop_alarm();
    124e:	0e 94 ae 08 	call	0x115c	; 0x115c <stop_alarm>
			counter_buzzer = 0;
    1252:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <counter_buzzer+0x1>
    1256:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <counter_buzzer>
			three_second = false;
    125a:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <three_second>
		}

		if (ten_second)
    125e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <ten_second>
    1262:	88 23       	and	r24, r24
    1264:	51 f0       	breq	.+20     	; 0x127a <main+0x7e>
		{
			if (!manual)
    1266:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <manual>
    126a:	81 11       	cpse	r24, r1
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <main+0x76>
			{
				close_box();
    126e:	0e 94 92 08 	call	0x1124	; 0x1124 <close_box>
			}
			counter_box = 0;
    1272:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <counter_box>
			ten_second = false;
    1276:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <ten_second>
		}

		if (box)
    127a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <box>
    127e:	88 23       	and	r24, r24
    1280:	51 f0       	breq	.+20     	; 0x1296 <main+0x9a>
		{
			if (!manual)
    1282:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <manual>
    1286:	81 11       	cpse	r24, r1
    1288:	02 c0       	rjmp	.+4      	; 0x128e <main+0x92>
			{
				open_box();
    128a:	0e 94 84 08 	call	0x1108	; 0x1108 <open_box>
			}
			counter_box = 0;
    128e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <counter_box>
			box = false;
    1292:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <box>
		}

		if (buzzer)
    1296:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <buzzer>
    129a:	88 23       	and	r24, r24
    129c:	39 f0       	breq	.+14     	; 0x12ac <main+0xb0>
		{
			SBIT(BUZZER_PORT, BUZZER_PIN);
    129e:	97 9a       	sbi	0x12, 7	; 18
			counter_buzzer = 0;
    12a0:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <counter_buzzer+0x1>
    12a4:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <counter_buzzer>
			buzzer = false;
    12a8:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <buzzer>
		}

		if (is_press)
    12ac:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <is_press>
    12b0:	88 23       	and	r24, r24
    12b2:	21 f0       	breq	.+8      	; 0x12bc <main+0xc0>
		{
			button_pressed();
    12b4:	0e 94 9f 08 	call	0x113e	; 0x113e <button_pressed>
			is_press = false;
    12b8:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <is_press>
		}

		if (set_time)
    12bc:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <set_time>
    12c0:	88 23       	and	r24, r24
    12c2:	21 f0       	breq	.+8      	; 0x12cc <main+0xd0>
		{
			command_set_time();
    12c4:	0e 94 2c 08 	call	0x1058	; 0x1058 <command_set_time>
			set_time = false;
    12c8:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <set_time>
		}

		if (set_alarm)
    12cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <set_alarm>
    12d0:	88 23       	and	r24, r24
    12d2:	21 f0       	breq	.+8      	; 0x12dc <main+0xe0>
		{
			command_set_alarm();
    12d4:	0e 94 39 08 	call	0x1072	; 0x1072 <command_set_alarm>
			set_alarm = false;
    12d8:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <set_alarm>
		}

		if (help)
    12dc:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <help>
    12e0:	88 23       	and	r24, r24
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <main+0xea>
    12e4:	96 cf       	rjmp	.-212    	; 0x1212 <main+0x16>
		{
			command_help();
    12e6:	0e 94 6f 08 	call	0x10de	; 0x10de <command_help>
			help = false;
    12ea:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <help>
    12ee:	91 cf       	rjmp	.-222    	; 0x1212 <main+0x16>

000012f0 <__vector_2>:

	return 0;
}

ISR(INT1_vect)
{
    12f0:	1f 92       	push	r1
    12f2:	0f 92       	push	r0
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	0f 92       	push	r0
    12f8:	11 24       	eor	r1, r1
    12fa:	8f 93       	push	r24
	buzzer = true;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <buzzer>
}
    1302:	8f 91       	pop	r24
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_3>:

ISR(INT2_vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	8f 93       	push	r24
	is_press = true;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <is_press>
}
    1320:	8f 91       	pop	r24
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
	TCNT0 = 177;
    133a:	81 eb       	ldi	r24, 0xB1	; 177
    133c:	82 bf       	out	0x32, r24	; 50
	TIFR = (1 << TOV0);
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	88 bf       	out	0x38, r24	; 56

	counter_ultrasonic++;
    1342:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <counter_ultrasonic>
    1346:	9f 5f       	subi	r25, 0xFF	; 255
    1348:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <counter_ultrasonic>
	counter_time++;
    134c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <counter_time>
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <counter_time>

	if (counter_ultrasonic == 50)
    1356:	92 33       	cpi	r25, 0x32	; 50
    1358:	19 f4       	brne	.+6      	; 0x1360 <__vector_11+0x34>
	{
		half_second = true;
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <half_second>
	}

	if (counter_time == 100)
    1360:	84 36       	cpi	r24, 0x64	; 100
    1362:	19 f4       	brne	.+6      	; 0x136a <__vector_11+0x3e>
	{
		one_second = true;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <one_second>
	}
}
    136a:	9f 91       	pop	r25
    136c:	8f 91       	pop	r24
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	8f 93       	push	r24
    1388:	9f 93       	push	r25
	TCNT1 = 57723;
    138a:	8b e7       	ldi	r24, 0x7B	; 123
    138c:	91 ee       	ldi	r25, 0xE1	; 225
    138e:	9d bd       	out	0x2d, r25	; 45
    1390:	8c bd       	out	0x2c, r24	; 44
	TIFR = (1 << TOV1);
    1392:	84 e0       	ldi	r24, 0x04	; 4
    1394:	88 bf       	out	0x38, r24	; 56

	counter_buzzer++;
    1396:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <counter_buzzer>
    139a:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <counter_buzzer+0x1>
    139e:	2f 5f       	subi	r18, 0xFF	; 255
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	30 93 ad 01 	sts	0x01AD, r19	; 0x8001ad <counter_buzzer+0x1>
    13a6:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <counter_buzzer>
	counter_box++;
    13aa:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <counter_box>
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <counter_box>

	if (counter_buzzer == 3)
    13b4:	23 30       	cpi	r18, 0x03	; 3
    13b6:	31 05       	cpc	r19, r1
    13b8:	19 f4       	brne	.+6      	; 0x13c0 <__vector_9+0x48>
	{
		three_second = true;
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <three_second>
	}

	if (counter_box == 10)
    13c0:	8a 30       	cpi	r24, 0x0A	; 10
    13c2:	19 f4       	brne	.+6      	; 0x13ca <__vector_9+0x52>
	{
		ten_second = true;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <ten_second>
	}
}
    13ca:	9f 91       	pop	r25
    13cc:	8f 91       	pop	r24
    13ce:	3f 91       	pop	r19
    13d0:	2f 91       	pop	r18
    13d2:	0f 90       	pop	r0
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	0f 90       	pop	r0
    13d8:	1f 90       	pop	r1
    13da:	18 95       	reti

000013dc <__vector_16>:

ISR(ADC_vect)
{
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	2f 93       	push	r18
    13e8:	3f 93       	push	r19
    13ea:	4f 93       	push	r20
    13ec:	5f 93       	push	r21
    13ee:	6f 93       	push	r22
    13f0:	7f 93       	push	r23
    13f2:	8f 93       	push	r24
    13f4:	9f 93       	push	r25
    13f6:	af 93       	push	r26
    13f8:	bf 93       	push	r27
    13fa:	ef 93       	push	r30
    13fc:	ff 93       	push	r31
	uint16_t temp = ADC;
    13fe:	64 b1       	in	r22, 0x04	; 4
    1400:	75 b1       	in	r23, 0x05	; 5
	temp_decimal = (float)temp / 10 - 0.2;
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__floatunsisf>
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__divsf3>
    1416:	2d ec       	ldi	r18, 0xCD	; 205
    1418:	3c ec       	ldi	r19, 0xCC	; 204
    141a:	4c e4       	ldi	r20, 0x4C	; 76
    141c:	5e e3       	ldi	r21, 0x3E	; 62
    141e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__subsf3>
    1422:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <temp_decimal>
    1426:	70 93 54 02 	sts	0x0254, r23	; 0x800254 <temp_decimal+0x1>
    142a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <temp_decimal+0x2>
    142e:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <temp_decimal+0x3>
	temp_integer = (uint8_t)temp_decimal;
    1432:	0e 94 33 0b 	call	0x1666	; 0x1666 <__fixunssfsi>
    1436:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <temp_integer>
}
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_13>:

#if SERIAL_INTERRUPT == 1
ISR(USART_RXC_vect)
{
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	2f 93       	push	r18
    1468:	3f 93       	push	r19
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	ef 93       	push	r30
    147c:	ff 93       	push	r31
	char c = UDR;
    147e:	8c b1       	in	r24, 0x0c	; 12
	UDR = c;
    1480:	8c b9       	out	0x0c, r24	; 12

	get_cmd(c);
    1482:	0e 94 b3 08 	call	0x1166	; 0x1166 <get_cmd>
}
    1486:	ff 91       	pop	r31
    1488:	ef 91       	pop	r30
    148a:	bf 91       	pop	r27
    148c:	af 91       	pop	r26
    148e:	9f 91       	pop	r25
    1490:	8f 91       	pop	r24
    1492:	7f 91       	pop	r23
    1494:	6f 91       	pop	r22
    1496:	5f 91       	pop	r21
    1498:	4f 91       	pop	r20
    149a:	3f 91       	pop	r19
    149c:	2f 91       	pop	r18
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	0f 90       	pop	r0
    14a4:	1f 90       	pop	r1
    14a6:	18 95       	reti

000014a8 <__subsf3>:
    14a8:	50 58       	subi	r21, 0x80	; 128

000014aa <__addsf3>:
    14aa:	bb 27       	eor	r27, r27
    14ac:	aa 27       	eor	r26, r26
    14ae:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__addsf3x>
    14b2:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_round>
    14b6:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__fp_pscA>
    14ba:	38 f0       	brcs	.+14     	; 0x14ca <__addsf3+0x20>
    14bc:	0e 94 af 0b 	call	0x175e	; 0x175e <__fp_pscB>
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <__addsf3+0x20>
    14c2:	39 f4       	brne	.+14     	; 0x14d2 <__addsf3+0x28>
    14c4:	9f 3f       	cpi	r25, 0xFF	; 255
    14c6:	19 f4       	brne	.+6      	; 0x14ce <__addsf3+0x24>
    14c8:	26 f4       	brtc	.+8      	; 0x14d2 <__addsf3+0x28>
    14ca:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_nan>
    14ce:	0e f4       	brtc	.+2      	; 0x14d2 <__addsf3+0x28>
    14d0:	e0 95       	com	r30
    14d2:	e7 fb       	bst	r30, 7
    14d4:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__fp_inf>

000014d8 <__addsf3x>:
    14d8:	e9 2f       	mov	r30, r25
    14da:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fp_split3>
    14de:	58 f3       	brcs	.-42     	; 0x14b6 <__addsf3+0xc>
    14e0:	ba 17       	cp	r27, r26
    14e2:	62 07       	cpc	r22, r18
    14e4:	73 07       	cpc	r23, r19
    14e6:	84 07       	cpc	r24, r20
    14e8:	95 07       	cpc	r25, r21
    14ea:	20 f0       	brcs	.+8      	; 0x14f4 <__addsf3x+0x1c>
    14ec:	79 f4       	brne	.+30     	; 0x150c <__addsf3x+0x34>
    14ee:	a6 f5       	brtc	.+104    	; 0x1558 <__addsf3x+0x80>
    14f0:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__fp_zero>
    14f4:	0e f4       	brtc	.+2      	; 0x14f8 <__addsf3x+0x20>
    14f6:	e0 95       	com	r30
    14f8:	0b 2e       	mov	r0, r27
    14fa:	ba 2f       	mov	r27, r26
    14fc:	a0 2d       	mov	r26, r0
    14fe:	0b 01       	movw	r0, r22
    1500:	b9 01       	movw	r22, r18
    1502:	90 01       	movw	r18, r0
    1504:	0c 01       	movw	r0, r24
    1506:	ca 01       	movw	r24, r20
    1508:	a0 01       	movw	r20, r0
    150a:	11 24       	eor	r1, r1
    150c:	ff 27       	eor	r31, r31
    150e:	59 1b       	sub	r21, r25
    1510:	99 f0       	breq	.+38     	; 0x1538 <__addsf3x+0x60>
    1512:	59 3f       	cpi	r21, 0xF9	; 249
    1514:	50 f4       	brcc	.+20     	; 0x152a <__addsf3x+0x52>
    1516:	50 3e       	cpi	r21, 0xE0	; 224
    1518:	68 f1       	brcs	.+90     	; 0x1574 <__addsf3x+0x9c>
    151a:	1a 16       	cp	r1, r26
    151c:	f0 40       	sbci	r31, 0x00	; 0
    151e:	a2 2f       	mov	r26, r18
    1520:	23 2f       	mov	r18, r19
    1522:	34 2f       	mov	r19, r20
    1524:	44 27       	eor	r20, r20
    1526:	58 5f       	subi	r21, 0xF8	; 248
    1528:	f3 cf       	rjmp	.-26     	; 0x1510 <__addsf3x+0x38>
    152a:	46 95       	lsr	r20
    152c:	37 95       	ror	r19
    152e:	27 95       	ror	r18
    1530:	a7 95       	ror	r26
    1532:	f0 40       	sbci	r31, 0x00	; 0
    1534:	53 95       	inc	r21
    1536:	c9 f7       	brne	.-14     	; 0x152a <__addsf3x+0x52>
    1538:	7e f4       	brtc	.+30     	; 0x1558 <__addsf3x+0x80>
    153a:	1f 16       	cp	r1, r31
    153c:	ba 0b       	sbc	r27, r26
    153e:	62 0b       	sbc	r22, r18
    1540:	73 0b       	sbc	r23, r19
    1542:	84 0b       	sbc	r24, r20
    1544:	ba f0       	brmi	.+46     	; 0x1574 <__addsf3x+0x9c>
    1546:	91 50       	subi	r25, 0x01	; 1
    1548:	a1 f0       	breq	.+40     	; 0x1572 <__addsf3x+0x9a>
    154a:	ff 0f       	add	r31, r31
    154c:	bb 1f       	adc	r27, r27
    154e:	66 1f       	adc	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	88 1f       	adc	r24, r24
    1554:	c2 f7       	brpl	.-16     	; 0x1546 <__addsf3x+0x6e>
    1556:	0e c0       	rjmp	.+28     	; 0x1574 <__addsf3x+0x9c>
    1558:	ba 0f       	add	r27, r26
    155a:	62 1f       	adc	r22, r18
    155c:	73 1f       	adc	r23, r19
    155e:	84 1f       	adc	r24, r20
    1560:	48 f4       	brcc	.+18     	; 0x1574 <__addsf3x+0x9c>
    1562:	87 95       	ror	r24
    1564:	77 95       	ror	r23
    1566:	67 95       	ror	r22
    1568:	b7 95       	ror	r27
    156a:	f7 95       	ror	r31
    156c:	9e 3f       	cpi	r25, 0xFE	; 254
    156e:	08 f0       	brcs	.+2      	; 0x1572 <__addsf3x+0x9a>
    1570:	b0 cf       	rjmp	.-160    	; 0x14d2 <__addsf3+0x28>
    1572:	93 95       	inc	r25
    1574:	88 0f       	add	r24, r24
    1576:	08 f0       	brcs	.+2      	; 0x157a <__addsf3x+0xa2>
    1578:	99 27       	eor	r25, r25
    157a:	ee 0f       	add	r30, r30
    157c:	97 95       	ror	r25
    157e:	87 95       	ror	r24
    1580:	08 95       	ret

00001582 <__divsf3>:
    1582:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__divsf3x>
    1586:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_round>
    158a:	0e 94 af 0b 	call	0x175e	; 0x175e <__fp_pscB>
    158e:	58 f0       	brcs	.+22     	; 0x15a6 <__divsf3+0x24>
    1590:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__fp_pscA>
    1594:	40 f0       	brcs	.+16     	; 0x15a6 <__divsf3+0x24>
    1596:	29 f4       	brne	.+10     	; 0x15a2 <__divsf3+0x20>
    1598:	5f 3f       	cpi	r21, 0xFF	; 255
    159a:	29 f0       	breq	.+10     	; 0x15a6 <__divsf3+0x24>
    159c:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__fp_inf>
    15a0:	51 11       	cpse	r21, r1
    15a2:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__fp_szero>
    15a6:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__fp_nan>

000015aa <__divsf3x>:
    15aa:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fp_split3>
    15ae:	68 f3       	brcs	.-38     	; 0x158a <__divsf3+0x8>

000015b0 <__divsf3_pse>:
    15b0:	99 23       	and	r25, r25
    15b2:	b1 f3       	breq	.-20     	; 0x15a0 <__divsf3+0x1e>
    15b4:	55 23       	and	r21, r21
    15b6:	91 f3       	breq	.-28     	; 0x159c <__divsf3+0x1a>
    15b8:	95 1b       	sub	r25, r21
    15ba:	55 0b       	sbc	r21, r21
    15bc:	bb 27       	eor	r27, r27
    15be:	aa 27       	eor	r26, r26
    15c0:	62 17       	cp	r22, r18
    15c2:	73 07       	cpc	r23, r19
    15c4:	84 07       	cpc	r24, r20
    15c6:	38 f0       	brcs	.+14     	; 0x15d6 <__divsf3_pse+0x26>
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	5f 4f       	sbci	r21, 0xFF	; 255
    15cc:	22 0f       	add	r18, r18
    15ce:	33 1f       	adc	r19, r19
    15d0:	44 1f       	adc	r20, r20
    15d2:	aa 1f       	adc	r26, r26
    15d4:	a9 f3       	breq	.-22     	; 0x15c0 <__divsf3_pse+0x10>
    15d6:	35 d0       	rcall	.+106    	; 0x1642 <__divsf3_pse+0x92>
    15d8:	0e 2e       	mov	r0, r30
    15da:	3a f0       	brmi	.+14     	; 0x15ea <__divsf3_pse+0x3a>
    15dc:	e0 e8       	ldi	r30, 0x80	; 128
    15de:	32 d0       	rcall	.+100    	; 0x1644 <__divsf3_pse+0x94>
    15e0:	91 50       	subi	r25, 0x01	; 1
    15e2:	50 40       	sbci	r21, 0x00	; 0
    15e4:	e6 95       	lsr	r30
    15e6:	00 1c       	adc	r0, r0
    15e8:	ca f7       	brpl	.-14     	; 0x15dc <__divsf3_pse+0x2c>
    15ea:	2b d0       	rcall	.+86     	; 0x1642 <__divsf3_pse+0x92>
    15ec:	fe 2f       	mov	r31, r30
    15ee:	29 d0       	rcall	.+82     	; 0x1642 <__divsf3_pse+0x92>
    15f0:	66 0f       	add	r22, r22
    15f2:	77 1f       	adc	r23, r23
    15f4:	88 1f       	adc	r24, r24
    15f6:	bb 1f       	adc	r27, r27
    15f8:	26 17       	cp	r18, r22
    15fa:	37 07       	cpc	r19, r23
    15fc:	48 07       	cpc	r20, r24
    15fe:	ab 07       	cpc	r26, r27
    1600:	b0 e8       	ldi	r27, 0x80	; 128
    1602:	09 f0       	breq	.+2      	; 0x1606 <__divsf3_pse+0x56>
    1604:	bb 0b       	sbc	r27, r27
    1606:	80 2d       	mov	r24, r0
    1608:	bf 01       	movw	r22, r30
    160a:	ff 27       	eor	r31, r31
    160c:	93 58       	subi	r25, 0x83	; 131
    160e:	5f 4f       	sbci	r21, 0xFF	; 255
    1610:	3a f0       	brmi	.+14     	; 0x1620 <__divsf3_pse+0x70>
    1612:	9e 3f       	cpi	r25, 0xFE	; 254
    1614:	51 05       	cpc	r21, r1
    1616:	78 f0       	brcs	.+30     	; 0x1636 <__divsf3_pse+0x86>
    1618:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__fp_inf>
    161c:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__fp_szero>
    1620:	5f 3f       	cpi	r21, 0xFF	; 255
    1622:	e4 f3       	brlt	.-8      	; 0x161c <__divsf3_pse+0x6c>
    1624:	98 3e       	cpi	r25, 0xE8	; 232
    1626:	d4 f3       	brlt	.-12     	; 0x161c <__divsf3_pse+0x6c>
    1628:	86 95       	lsr	r24
    162a:	77 95       	ror	r23
    162c:	67 95       	ror	r22
    162e:	b7 95       	ror	r27
    1630:	f7 95       	ror	r31
    1632:	9f 5f       	subi	r25, 0xFF	; 255
    1634:	c9 f7       	brne	.-14     	; 0x1628 <__divsf3_pse+0x78>
    1636:	88 0f       	add	r24, r24
    1638:	91 1d       	adc	r25, r1
    163a:	96 95       	lsr	r25
    163c:	87 95       	ror	r24
    163e:	97 f9       	bld	r25, 7
    1640:	08 95       	ret
    1642:	e1 e0       	ldi	r30, 0x01	; 1
    1644:	66 0f       	add	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	88 1f       	adc	r24, r24
    164a:	bb 1f       	adc	r27, r27
    164c:	62 17       	cp	r22, r18
    164e:	73 07       	cpc	r23, r19
    1650:	84 07       	cpc	r24, r20
    1652:	ba 07       	cpc	r27, r26
    1654:	20 f0       	brcs	.+8      	; 0x165e <__divsf3_pse+0xae>
    1656:	62 1b       	sub	r22, r18
    1658:	73 0b       	sbc	r23, r19
    165a:	84 0b       	sbc	r24, r20
    165c:	ba 0b       	sbc	r27, r26
    165e:	ee 1f       	adc	r30, r30
    1660:	88 f7       	brcc	.-30     	; 0x1644 <__divsf3_pse+0x94>
    1662:	e0 95       	com	r30
    1664:	08 95       	ret

00001666 <__fixunssfsi>:
    1666:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fp_splitA>
    166a:	88 f0       	brcs	.+34     	; 0x168e <__fixunssfsi+0x28>
    166c:	9f 57       	subi	r25, 0x7F	; 127
    166e:	98 f0       	brcs	.+38     	; 0x1696 <__fixunssfsi+0x30>
    1670:	b9 2f       	mov	r27, r25
    1672:	99 27       	eor	r25, r25
    1674:	b7 51       	subi	r27, 0x17	; 23
    1676:	b0 f0       	brcs	.+44     	; 0x16a4 <__fixunssfsi+0x3e>
    1678:	e1 f0       	breq	.+56     	; 0x16b2 <__fixunssfsi+0x4c>
    167a:	66 0f       	add	r22, r22
    167c:	77 1f       	adc	r23, r23
    167e:	88 1f       	adc	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	1a f0       	brmi	.+6      	; 0x168a <__fixunssfsi+0x24>
    1684:	ba 95       	dec	r27
    1686:	c9 f7       	brne	.-14     	; 0x167a <__fixunssfsi+0x14>
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <__fixunssfsi+0x4c>
    168a:	b1 30       	cpi	r27, 0x01	; 1
    168c:	91 f0       	breq	.+36     	; 0x16b2 <__fixunssfsi+0x4c>
    168e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_zero>
    1692:	b1 e0       	ldi	r27, 0x01	; 1
    1694:	08 95       	ret
    1696:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__fp_zero>
    169a:	67 2f       	mov	r22, r23
    169c:	78 2f       	mov	r23, r24
    169e:	88 27       	eor	r24, r24
    16a0:	b8 5f       	subi	r27, 0xF8	; 248
    16a2:	39 f0       	breq	.+14     	; 0x16b2 <__fixunssfsi+0x4c>
    16a4:	b9 3f       	cpi	r27, 0xF9	; 249
    16a6:	cc f3       	brlt	.-14     	; 0x169a <__fixunssfsi+0x34>
    16a8:	86 95       	lsr	r24
    16aa:	77 95       	ror	r23
    16ac:	67 95       	ror	r22
    16ae:	b3 95       	inc	r27
    16b0:	d9 f7       	brne	.-10     	; 0x16a8 <__fixunssfsi+0x42>
    16b2:	3e f4       	brtc	.+14     	; 0x16c2 <__fixunssfsi+0x5c>
    16b4:	90 95       	com	r25
    16b6:	80 95       	com	r24
    16b8:	70 95       	com	r23
    16ba:	61 95       	neg	r22
    16bc:	7f 4f       	sbci	r23, 0xFF	; 255
    16be:	8f 4f       	sbci	r24, 0xFF	; 255
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	08 95       	ret

000016c4 <__floatunsisf>:
    16c4:	e8 94       	clt
    16c6:	09 c0       	rjmp	.+18     	; 0x16da <__floatsisf+0x12>

000016c8 <__floatsisf>:
    16c8:	97 fb       	bst	r25, 7
    16ca:	3e f4       	brtc	.+14     	; 0x16da <__floatsisf+0x12>
    16cc:	90 95       	com	r25
    16ce:	80 95       	com	r24
    16d0:	70 95       	com	r23
    16d2:	61 95       	neg	r22
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 4f       	sbci	r24, 0xFF	; 255
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	99 23       	and	r25, r25
    16dc:	a9 f0       	breq	.+42     	; 0x1708 <__floatsisf+0x40>
    16de:	f9 2f       	mov	r31, r25
    16e0:	96 e9       	ldi	r25, 0x96	; 150
    16e2:	bb 27       	eor	r27, r27
    16e4:	93 95       	inc	r25
    16e6:	f6 95       	lsr	r31
    16e8:	87 95       	ror	r24
    16ea:	77 95       	ror	r23
    16ec:	67 95       	ror	r22
    16ee:	b7 95       	ror	r27
    16f0:	f1 11       	cpse	r31, r1
    16f2:	f8 cf       	rjmp	.-16     	; 0x16e4 <__floatsisf+0x1c>
    16f4:	fa f4       	brpl	.+62     	; 0x1734 <__floatsisf+0x6c>
    16f6:	bb 0f       	add	r27, r27
    16f8:	11 f4       	brne	.+4      	; 0x16fe <__floatsisf+0x36>
    16fa:	60 ff       	sbrs	r22, 0
    16fc:	1b c0       	rjmp	.+54     	; 0x1734 <__floatsisf+0x6c>
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	8f 4f       	sbci	r24, 0xFF	; 255
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	16 c0       	rjmp	.+44     	; 0x1734 <__floatsisf+0x6c>
    1708:	88 23       	and	r24, r24
    170a:	11 f0       	breq	.+4      	; 0x1710 <__floatsisf+0x48>
    170c:	96 e9       	ldi	r25, 0x96	; 150
    170e:	11 c0       	rjmp	.+34     	; 0x1732 <__floatsisf+0x6a>
    1710:	77 23       	and	r23, r23
    1712:	21 f0       	breq	.+8      	; 0x171c <__floatsisf+0x54>
    1714:	9e e8       	ldi	r25, 0x8E	; 142
    1716:	87 2f       	mov	r24, r23
    1718:	76 2f       	mov	r23, r22
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <__floatsisf+0x5e>
    171c:	66 23       	and	r22, r22
    171e:	71 f0       	breq	.+28     	; 0x173c <__floatsisf+0x74>
    1720:	96 e8       	ldi	r25, 0x86	; 134
    1722:	86 2f       	mov	r24, r22
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	2a f0       	brmi	.+10     	; 0x1734 <__floatsisf+0x6c>
    172a:	9a 95       	dec	r25
    172c:	66 0f       	add	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	da f7       	brpl	.-10     	; 0x172a <__floatsisf+0x62>
    1734:	88 0f       	add	r24, r24
    1736:	96 95       	lsr	r25
    1738:	87 95       	ror	r24
    173a:	97 f9       	bld	r25, 7
    173c:	08 95       	ret

0000173e <__fp_inf>:
    173e:	97 f9       	bld	r25, 7
    1740:	9f 67       	ori	r25, 0x7F	; 127
    1742:	80 e8       	ldi	r24, 0x80	; 128
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	08 95       	ret

0000174a <__fp_nan>:
    174a:	9f ef       	ldi	r25, 0xFF	; 255
    174c:	80 ec       	ldi	r24, 0xC0	; 192
    174e:	08 95       	ret

00001750 <__fp_pscA>:
    1750:	00 24       	eor	r0, r0
    1752:	0a 94       	dec	r0
    1754:	16 16       	cp	r1, r22
    1756:	17 06       	cpc	r1, r23
    1758:	18 06       	cpc	r1, r24
    175a:	09 06       	cpc	r0, r25
    175c:	08 95       	ret

0000175e <__fp_pscB>:
    175e:	00 24       	eor	r0, r0
    1760:	0a 94       	dec	r0
    1762:	12 16       	cp	r1, r18
    1764:	13 06       	cpc	r1, r19
    1766:	14 06       	cpc	r1, r20
    1768:	05 06       	cpc	r0, r21
    176a:	08 95       	ret

0000176c <__fp_round>:
    176c:	09 2e       	mov	r0, r25
    176e:	03 94       	inc	r0
    1770:	00 0c       	add	r0, r0
    1772:	11 f4       	brne	.+4      	; 0x1778 <__fp_round+0xc>
    1774:	88 23       	and	r24, r24
    1776:	52 f0       	brmi	.+20     	; 0x178c <__fp_round+0x20>
    1778:	bb 0f       	add	r27, r27
    177a:	40 f4       	brcc	.+16     	; 0x178c <__fp_round+0x20>
    177c:	bf 2b       	or	r27, r31
    177e:	11 f4       	brne	.+4      	; 0x1784 <__fp_round+0x18>
    1780:	60 ff       	sbrs	r22, 0
    1782:	04 c0       	rjmp	.+8      	; 0x178c <__fp_round+0x20>
    1784:	6f 5f       	subi	r22, 0xFF	; 255
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
    1788:	8f 4f       	sbci	r24, 0xFF	; 255
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	08 95       	ret

0000178e <__fp_split3>:
    178e:	57 fd       	sbrc	r21, 7
    1790:	90 58       	subi	r25, 0x80	; 128
    1792:	44 0f       	add	r20, r20
    1794:	55 1f       	adc	r21, r21
    1796:	59 f0       	breq	.+22     	; 0x17ae <__fp_splitA+0x10>
    1798:	5f 3f       	cpi	r21, 0xFF	; 255
    179a:	71 f0       	breq	.+28     	; 0x17b8 <__fp_splitA+0x1a>
    179c:	47 95       	ror	r20

0000179e <__fp_splitA>:
    179e:	88 0f       	add	r24, r24
    17a0:	97 fb       	bst	r25, 7
    17a2:	99 1f       	adc	r25, r25
    17a4:	61 f0       	breq	.+24     	; 0x17be <__fp_splitA+0x20>
    17a6:	9f 3f       	cpi	r25, 0xFF	; 255
    17a8:	79 f0       	breq	.+30     	; 0x17c8 <__fp_splitA+0x2a>
    17aa:	87 95       	ror	r24
    17ac:	08 95       	ret
    17ae:	12 16       	cp	r1, r18
    17b0:	13 06       	cpc	r1, r19
    17b2:	14 06       	cpc	r1, r20
    17b4:	55 1f       	adc	r21, r21
    17b6:	f2 cf       	rjmp	.-28     	; 0x179c <__fp_split3+0xe>
    17b8:	46 95       	lsr	r20
    17ba:	f1 df       	rcall	.-30     	; 0x179e <__fp_splitA>
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <__fp_splitA+0x30>
    17be:	16 16       	cp	r1, r22
    17c0:	17 06       	cpc	r1, r23
    17c2:	18 06       	cpc	r1, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	f1 cf       	rjmp	.-30     	; 0x17aa <__fp_splitA+0xc>
    17c8:	86 95       	lsr	r24
    17ca:	71 05       	cpc	r23, r1
    17cc:	61 05       	cpc	r22, r1
    17ce:	08 94       	sec
    17d0:	08 95       	ret

000017d2 <__fp_zero>:
    17d2:	e8 94       	clt

000017d4 <__fp_szero>:
    17d4:	bb 27       	eor	r27, r27
    17d6:	66 27       	eor	r22, r22
    17d8:	77 27       	eor	r23, r23
    17da:	cb 01       	movw	r24, r22
    17dc:	97 f9       	bld	r25, 7
    17de:	08 95       	ret

000017e0 <__udivmodsi4>:
    17e0:	a1 e2       	ldi	r26, 0x21	; 33
    17e2:	1a 2e       	mov	r1, r26
    17e4:	aa 1b       	sub	r26, r26
    17e6:	bb 1b       	sub	r27, r27
    17e8:	fd 01       	movw	r30, r26
    17ea:	0d c0       	rjmp	.+26     	; 0x1806 <__udivmodsi4_ep>

000017ec <__udivmodsi4_loop>:
    17ec:	aa 1f       	adc	r26, r26
    17ee:	bb 1f       	adc	r27, r27
    17f0:	ee 1f       	adc	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	a2 17       	cp	r26, r18
    17f6:	b3 07       	cpc	r27, r19
    17f8:	e4 07       	cpc	r30, r20
    17fa:	f5 07       	cpc	r31, r21
    17fc:	20 f0       	brcs	.+8      	; 0x1806 <__udivmodsi4_ep>
    17fe:	a2 1b       	sub	r26, r18
    1800:	b3 0b       	sbc	r27, r19
    1802:	e4 0b       	sbc	r30, r20
    1804:	f5 0b       	sbc	r31, r21

00001806 <__udivmodsi4_ep>:
    1806:	66 1f       	adc	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	1a 94       	dec	r1
    1810:	69 f7       	brne	.-38     	; 0x17ec <__udivmodsi4_loop>
    1812:	60 95       	com	r22
    1814:	70 95       	com	r23
    1816:	80 95       	com	r24
    1818:	90 95       	com	r25
    181a:	9b 01       	movw	r18, r22
    181c:	ac 01       	movw	r20, r24
    181e:	bd 01       	movw	r22, r26
    1820:	cf 01       	movw	r24, r30
    1822:	08 95       	ret

00001824 <strcmp>:
    1824:	fb 01       	movw	r30, r22
    1826:	dc 01       	movw	r26, r24
    1828:	8d 91       	ld	r24, X+
    182a:	01 90       	ld	r0, Z+
    182c:	80 19       	sub	r24, r0
    182e:	01 10       	cpse	r0, r1
    1830:	d9 f3       	breq	.-10     	; 0x1828 <strcmp+0x4>
    1832:	99 0b       	sbc	r25, r25
    1834:	08 95       	ret

00001836 <strcpy>:
    1836:	fb 01       	movw	r30, r22
    1838:	dc 01       	movw	r26, r24
    183a:	01 90       	ld	r0, Z+
    183c:	0d 92       	st	X+, r0
    183e:	00 20       	and	r0, r0
    1840:	e1 f7       	brne	.-8      	; 0x183a <strcpy+0x4>
    1842:	08 95       	ret

00001844 <sprintf>:
    1844:	ae e0       	ldi	r26, 0x0E	; 14
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e8 e2       	ldi	r30, 0x28	; 40
    184a:	fc e0       	ldi	r31, 0x0C	; 12
    184c:	0c 94 17 12 	jmp	0x242e	; 0x242e <__prologue_saves__+0x1c>
    1850:	0d 89       	ldd	r16, Y+21	; 0x15
    1852:	1e 89       	ldd	r17, Y+22	; 0x16
    1854:	86 e0       	ldi	r24, 0x06	; 6
    1856:	8c 83       	std	Y+4, r24	; 0x04
    1858:	1a 83       	std	Y+2, r17	; 0x02
    185a:	09 83       	std	Y+1, r16	; 0x01
    185c:	8f ef       	ldi	r24, 0xFF	; 255
    185e:	9f e7       	ldi	r25, 0x7F	; 127
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	ae 01       	movw	r20, r28
    1866:	47 5e       	subi	r20, 0xE7	; 231
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	6f 89       	ldd	r22, Y+23	; 0x17
    186c:	78 8d       	ldd	r23, Y+24	; 0x18
    186e:	ce 01       	movw	r24, r28
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <vfprintf>
    1876:	ef 81       	ldd	r30, Y+7	; 0x07
    1878:	f8 85       	ldd	r31, Y+8	; 0x08
    187a:	e0 0f       	add	r30, r16
    187c:	f1 1f       	adc	r31, r17
    187e:	10 82       	st	Z, r1
    1880:	2e 96       	adiw	r28, 0x0e	; 14
    1882:	e4 e0       	ldi	r30, 0x04	; 4
    1884:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__epilogue_restores__+0x1c>

00001888 <sscanf>:
    1888:	ae e0       	ldi	r26, 0x0E	; 14
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ea e4       	ldi	r30, 0x4A	; 74
    188e:	fc e0       	ldi	r31, 0x0C	; 12
    1890:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__prologue_saves__+0x20>
    1894:	85 e0       	ldi	r24, 0x05	; 5
    1896:	8c 83       	std	Y+4, r24	; 0x04
    1898:	8b 89       	ldd	r24, Y+19	; 0x13
    189a:	9c 89       	ldd	r25, Y+20	; 0x14
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	ae 01       	movw	r20, r28
    18a2:	49 5e       	subi	r20, 0xE9	; 233
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255
    18a6:	6d 89       	ldd	r22, Y+21	; 0x15
    18a8:	7e 89       	ldd	r23, Y+22	; 0x16
    18aa:	ce 01       	movw	r24, r28
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <vfscanf>
    18b2:	2e 96       	adiw	r28, 0x0e	; 14
    18b4:	e2 e0       	ldi	r30, 0x02	; 2
    18b6:	0c 94 35 12 	jmp	0x246a	; 0x246a <__epilogue_restores__+0x20>

000018ba <vfprintf>:
    18ba:	ab e0       	ldi	r26, 0x0B	; 11
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e3 e6       	ldi	r30, 0x63	; 99
    18c0:	fc e0       	ldi	r31, 0x0C	; 12
    18c2:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__prologue_saves__>
    18c6:	6c 01       	movw	r12, r24
    18c8:	7b 01       	movw	r14, r22
    18ca:	8a 01       	movw	r16, r20
    18cc:	fc 01       	movw	r30, r24
    18ce:	17 82       	std	Z+7, r1	; 0x07
    18d0:	16 82       	std	Z+6, r1	; 0x06
    18d2:	83 81       	ldd	r24, Z+3	; 0x03
    18d4:	81 ff       	sbrs	r24, 1
    18d6:	cc c1       	rjmp	.+920    	; 0x1c70 <vfprintf+0x3b6>
    18d8:	ce 01       	movw	r24, r28
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	3c 01       	movw	r6, r24
    18de:	f6 01       	movw	r30, r12
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	f7 01       	movw	r30, r14
    18e4:	93 fd       	sbrc	r25, 3
    18e6:	85 91       	lpm	r24, Z+
    18e8:	93 ff       	sbrs	r25, 3
    18ea:	81 91       	ld	r24, Z+
    18ec:	7f 01       	movw	r14, r30
    18ee:	88 23       	and	r24, r24
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <vfprintf+0x3a>
    18f2:	ba c1       	rjmp	.+884    	; 0x1c68 <vfprintf+0x3ae>
    18f4:	85 32       	cpi	r24, 0x25	; 37
    18f6:	39 f4       	brne	.+14     	; 0x1906 <vfprintf+0x4c>
    18f8:	93 fd       	sbrc	r25, 3
    18fa:	85 91       	lpm	r24, Z+
    18fc:	93 ff       	sbrs	r25, 3
    18fe:	81 91       	ld	r24, Z+
    1900:	7f 01       	movw	r14, r30
    1902:	85 32       	cpi	r24, 0x25	; 37
    1904:	29 f4       	brne	.+10     	; 0x1910 <vfprintf+0x56>
    1906:	b6 01       	movw	r22, r12
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <fputc>
    190e:	e7 cf       	rjmp	.-50     	; 0x18de <vfprintf+0x24>
    1910:	91 2c       	mov	r9, r1
    1912:	21 2c       	mov	r2, r1
    1914:	31 2c       	mov	r3, r1
    1916:	ff e1       	ldi	r31, 0x1F	; 31
    1918:	f3 15       	cp	r31, r3
    191a:	d8 f0       	brcs	.+54     	; 0x1952 <vfprintf+0x98>
    191c:	8b 32       	cpi	r24, 0x2B	; 43
    191e:	79 f0       	breq	.+30     	; 0x193e <vfprintf+0x84>
    1920:	38 f4       	brcc	.+14     	; 0x1930 <vfprintf+0x76>
    1922:	80 32       	cpi	r24, 0x20	; 32
    1924:	79 f0       	breq	.+30     	; 0x1944 <vfprintf+0x8a>
    1926:	83 32       	cpi	r24, 0x23	; 35
    1928:	a1 f4       	brne	.+40     	; 0x1952 <vfprintf+0x98>
    192a:	23 2d       	mov	r18, r3
    192c:	20 61       	ori	r18, 0x10	; 16
    192e:	1d c0       	rjmp	.+58     	; 0x196a <vfprintf+0xb0>
    1930:	8d 32       	cpi	r24, 0x2D	; 45
    1932:	61 f0       	breq	.+24     	; 0x194c <vfprintf+0x92>
    1934:	80 33       	cpi	r24, 0x30	; 48
    1936:	69 f4       	brne	.+26     	; 0x1952 <vfprintf+0x98>
    1938:	23 2d       	mov	r18, r3
    193a:	21 60       	ori	r18, 0x01	; 1
    193c:	16 c0       	rjmp	.+44     	; 0x196a <vfprintf+0xb0>
    193e:	83 2d       	mov	r24, r3
    1940:	82 60       	ori	r24, 0x02	; 2
    1942:	38 2e       	mov	r3, r24
    1944:	e3 2d       	mov	r30, r3
    1946:	e4 60       	ori	r30, 0x04	; 4
    1948:	3e 2e       	mov	r3, r30
    194a:	2a c0       	rjmp	.+84     	; 0x19a0 <vfprintf+0xe6>
    194c:	f3 2d       	mov	r31, r3
    194e:	f8 60       	ori	r31, 0x08	; 8
    1950:	1d c0       	rjmp	.+58     	; 0x198c <vfprintf+0xd2>
    1952:	37 fc       	sbrc	r3, 7
    1954:	2d c0       	rjmp	.+90     	; 0x19b0 <vfprintf+0xf6>
    1956:	20 ed       	ldi	r18, 0xD0	; 208
    1958:	28 0f       	add	r18, r24
    195a:	2a 30       	cpi	r18, 0x0A	; 10
    195c:	40 f0       	brcs	.+16     	; 0x196e <vfprintf+0xb4>
    195e:	8e 32       	cpi	r24, 0x2E	; 46
    1960:	b9 f4       	brne	.+46     	; 0x1990 <vfprintf+0xd6>
    1962:	36 fc       	sbrc	r3, 6
    1964:	81 c1       	rjmp	.+770    	; 0x1c68 <vfprintf+0x3ae>
    1966:	23 2d       	mov	r18, r3
    1968:	20 64       	ori	r18, 0x40	; 64
    196a:	32 2e       	mov	r3, r18
    196c:	19 c0       	rjmp	.+50     	; 0x19a0 <vfprintf+0xe6>
    196e:	36 fe       	sbrs	r3, 6
    1970:	06 c0       	rjmp	.+12     	; 0x197e <vfprintf+0xc4>
    1972:	8a e0       	ldi	r24, 0x0A	; 10
    1974:	98 9e       	mul	r9, r24
    1976:	20 0d       	add	r18, r0
    1978:	11 24       	eor	r1, r1
    197a:	92 2e       	mov	r9, r18
    197c:	11 c0       	rjmp	.+34     	; 0x19a0 <vfprintf+0xe6>
    197e:	ea e0       	ldi	r30, 0x0A	; 10
    1980:	2e 9e       	mul	r2, r30
    1982:	20 0d       	add	r18, r0
    1984:	11 24       	eor	r1, r1
    1986:	22 2e       	mov	r2, r18
    1988:	f3 2d       	mov	r31, r3
    198a:	f0 62       	ori	r31, 0x20	; 32
    198c:	3f 2e       	mov	r3, r31
    198e:	08 c0       	rjmp	.+16     	; 0x19a0 <vfprintf+0xe6>
    1990:	8c 36       	cpi	r24, 0x6C	; 108
    1992:	21 f4       	brne	.+8      	; 0x199c <vfprintf+0xe2>
    1994:	83 2d       	mov	r24, r3
    1996:	80 68       	ori	r24, 0x80	; 128
    1998:	38 2e       	mov	r3, r24
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <vfprintf+0xe6>
    199c:	88 36       	cpi	r24, 0x68	; 104
    199e:	41 f4       	brne	.+16     	; 0x19b0 <vfprintf+0xf6>
    19a0:	f7 01       	movw	r30, r14
    19a2:	93 fd       	sbrc	r25, 3
    19a4:	85 91       	lpm	r24, Z+
    19a6:	93 ff       	sbrs	r25, 3
    19a8:	81 91       	ld	r24, Z+
    19aa:	7f 01       	movw	r14, r30
    19ac:	81 11       	cpse	r24, r1
    19ae:	b3 cf       	rjmp	.-154    	; 0x1916 <vfprintf+0x5c>
    19b0:	98 2f       	mov	r25, r24
    19b2:	9f 7d       	andi	r25, 0xDF	; 223
    19b4:	95 54       	subi	r25, 0x45	; 69
    19b6:	93 30       	cpi	r25, 0x03	; 3
    19b8:	28 f4       	brcc	.+10     	; 0x19c4 <vfprintf+0x10a>
    19ba:	0c 5f       	subi	r16, 0xFC	; 252
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	9f e3       	ldi	r25, 0x3F	; 63
    19c0:	99 83       	std	Y+1, r25	; 0x01
    19c2:	0d c0       	rjmp	.+26     	; 0x19de <vfprintf+0x124>
    19c4:	83 36       	cpi	r24, 0x63	; 99
    19c6:	31 f0       	breq	.+12     	; 0x19d4 <vfprintf+0x11a>
    19c8:	83 37       	cpi	r24, 0x73	; 115
    19ca:	71 f0       	breq	.+28     	; 0x19e8 <vfprintf+0x12e>
    19cc:	83 35       	cpi	r24, 0x53	; 83
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <vfprintf+0x118>
    19d0:	59 c0       	rjmp	.+178    	; 0x1a84 <vfprintf+0x1ca>
    19d2:	21 c0       	rjmp	.+66     	; 0x1a16 <vfprintf+0x15c>
    19d4:	f8 01       	movw	r30, r16
    19d6:	80 81       	ld	r24, Z
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	0e 5f       	subi	r16, 0xFE	; 254
    19dc:	1f 4f       	sbci	r17, 0xFF	; 255
    19de:	88 24       	eor	r8, r8
    19e0:	83 94       	inc	r8
    19e2:	91 2c       	mov	r9, r1
    19e4:	53 01       	movw	r10, r6
    19e6:	13 c0       	rjmp	.+38     	; 0x1a0e <vfprintf+0x154>
    19e8:	28 01       	movw	r4, r16
    19ea:	f2 e0       	ldi	r31, 0x02	; 2
    19ec:	4f 0e       	add	r4, r31
    19ee:	51 1c       	adc	r5, r1
    19f0:	f8 01       	movw	r30, r16
    19f2:	a0 80       	ld	r10, Z
    19f4:	b1 80       	ldd	r11, Z+1	; 0x01
    19f6:	36 fe       	sbrs	r3, 6
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <vfprintf+0x146>
    19fa:	69 2d       	mov	r22, r9
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <vfprintf+0x14a>
    1a00:	6f ef       	ldi	r22, 0xFF	; 255
    1a02:	7f ef       	ldi	r23, 0xFF	; 255
    1a04:	c5 01       	movw	r24, r10
    1a06:	0e 94 0a 11 	call	0x2214	; 0x2214 <strnlen>
    1a0a:	4c 01       	movw	r8, r24
    1a0c:	82 01       	movw	r16, r4
    1a0e:	f3 2d       	mov	r31, r3
    1a10:	ff 77       	andi	r31, 0x7F	; 127
    1a12:	3f 2e       	mov	r3, r31
    1a14:	16 c0       	rjmp	.+44     	; 0x1a42 <vfprintf+0x188>
    1a16:	28 01       	movw	r4, r16
    1a18:	22 e0       	ldi	r18, 0x02	; 2
    1a1a:	42 0e       	add	r4, r18
    1a1c:	51 1c       	adc	r5, r1
    1a1e:	f8 01       	movw	r30, r16
    1a20:	a0 80       	ld	r10, Z
    1a22:	b1 80       	ldd	r11, Z+1	; 0x01
    1a24:	36 fe       	sbrs	r3, 6
    1a26:	03 c0       	rjmp	.+6      	; 0x1a2e <vfprintf+0x174>
    1a28:	69 2d       	mov	r22, r9
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <vfprintf+0x178>
    1a2e:	6f ef       	ldi	r22, 0xFF	; 255
    1a30:	7f ef       	ldi	r23, 0xFF	; 255
    1a32:	c5 01       	movw	r24, r10
    1a34:	0e 94 ff 10 	call	0x21fe	; 0x21fe <strnlen_P>
    1a38:	4c 01       	movw	r8, r24
    1a3a:	f3 2d       	mov	r31, r3
    1a3c:	f0 68       	ori	r31, 0x80	; 128
    1a3e:	3f 2e       	mov	r3, r31
    1a40:	82 01       	movw	r16, r4
    1a42:	33 fc       	sbrc	r3, 3
    1a44:	1b c0       	rjmp	.+54     	; 0x1a7c <vfprintf+0x1c2>
    1a46:	82 2d       	mov	r24, r2
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	88 16       	cp	r8, r24
    1a4c:	99 06       	cpc	r9, r25
    1a4e:	b0 f4       	brcc	.+44     	; 0x1a7c <vfprintf+0x1c2>
    1a50:	b6 01       	movw	r22, r12
    1a52:	80 e2       	ldi	r24, 0x20	; 32
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 53 11 	call	0x22a6	; 0x22a6 <fputc>
    1a5a:	2a 94       	dec	r2
    1a5c:	f4 cf       	rjmp	.-24     	; 0x1a46 <vfprintf+0x18c>
    1a5e:	f5 01       	movw	r30, r10
    1a60:	37 fc       	sbrc	r3, 7
    1a62:	85 91       	lpm	r24, Z+
    1a64:	37 fe       	sbrs	r3, 7
    1a66:	81 91       	ld	r24, Z+
    1a68:	5f 01       	movw	r10, r30
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 53 11 	call	0x22a6	; 0x22a6 <fputc>
    1a72:	21 10       	cpse	r2, r1
    1a74:	2a 94       	dec	r2
    1a76:	21 e0       	ldi	r18, 0x01	; 1
    1a78:	82 1a       	sub	r8, r18
    1a7a:	91 08       	sbc	r9, r1
    1a7c:	81 14       	cp	r8, r1
    1a7e:	91 04       	cpc	r9, r1
    1a80:	71 f7       	brne	.-36     	; 0x1a5e <vfprintf+0x1a4>
    1a82:	e8 c0       	rjmp	.+464    	; 0x1c54 <vfprintf+0x39a>
    1a84:	84 36       	cpi	r24, 0x64	; 100
    1a86:	11 f0       	breq	.+4      	; 0x1a8c <vfprintf+0x1d2>
    1a88:	89 36       	cpi	r24, 0x69	; 105
    1a8a:	41 f5       	brne	.+80     	; 0x1adc <vfprintf+0x222>
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	37 fe       	sbrs	r3, 7
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <vfprintf+0x1e6>
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	0c 5f       	subi	r16, 0xFC	; 252
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	08 c0       	rjmp	.+16     	; 0x1ab0 <vfprintf+0x1f6>
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	07 2e       	mov	r0, r23
    1aa6:	00 0c       	add	r0, r0
    1aa8:	88 0b       	sbc	r24, r24
    1aaa:	99 0b       	sbc	r25, r25
    1aac:	0e 5f       	subi	r16, 0xFE	; 254
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	f3 2d       	mov	r31, r3
    1ab2:	ff 76       	andi	r31, 0x6F	; 111
    1ab4:	3f 2e       	mov	r3, r31
    1ab6:	97 ff       	sbrs	r25, 7
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <vfprintf+0x212>
    1aba:	90 95       	com	r25
    1abc:	80 95       	com	r24
    1abe:	70 95       	com	r23
    1ac0:	61 95       	neg	r22
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	f0 68       	ori	r31, 0x80	; 128
    1aca:	3f 2e       	mov	r3, r31
    1acc:	2a e0       	ldi	r18, 0x0A	; 10
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	a3 01       	movw	r20, r6
    1ad2:	0e 94 a8 11 	call	0x2350	; 0x2350 <__ultoa_invert>
    1ad6:	88 2e       	mov	r8, r24
    1ad8:	86 18       	sub	r8, r6
    1ada:	45 c0       	rjmp	.+138    	; 0x1b66 <vfprintf+0x2ac>
    1adc:	85 37       	cpi	r24, 0x75	; 117
    1ade:	31 f4       	brne	.+12     	; 0x1aec <vfprintf+0x232>
    1ae0:	23 2d       	mov	r18, r3
    1ae2:	2f 7e       	andi	r18, 0xEF	; 239
    1ae4:	b2 2e       	mov	r11, r18
    1ae6:	2a e0       	ldi	r18, 0x0A	; 10
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	25 c0       	rjmp	.+74     	; 0x1b36 <vfprintf+0x27c>
    1aec:	93 2d       	mov	r25, r3
    1aee:	99 7f       	andi	r25, 0xF9	; 249
    1af0:	b9 2e       	mov	r11, r25
    1af2:	8f 36       	cpi	r24, 0x6F	; 111
    1af4:	c1 f0       	breq	.+48     	; 0x1b26 <vfprintf+0x26c>
    1af6:	18 f4       	brcc	.+6      	; 0x1afe <vfprintf+0x244>
    1af8:	88 35       	cpi	r24, 0x58	; 88
    1afa:	79 f0       	breq	.+30     	; 0x1b1a <vfprintf+0x260>
    1afc:	b5 c0       	rjmp	.+362    	; 0x1c68 <vfprintf+0x3ae>
    1afe:	80 37       	cpi	r24, 0x70	; 112
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <vfprintf+0x24e>
    1b02:	88 37       	cpi	r24, 0x78	; 120
    1b04:	21 f0       	breq	.+8      	; 0x1b0e <vfprintf+0x254>
    1b06:	b0 c0       	rjmp	.+352    	; 0x1c68 <vfprintf+0x3ae>
    1b08:	e9 2f       	mov	r30, r25
    1b0a:	e0 61       	ori	r30, 0x10	; 16
    1b0c:	be 2e       	mov	r11, r30
    1b0e:	b4 fe       	sbrs	r11, 4
    1b10:	0d c0       	rjmp	.+26     	; 0x1b2c <vfprintf+0x272>
    1b12:	fb 2d       	mov	r31, r11
    1b14:	f4 60       	ori	r31, 0x04	; 4
    1b16:	bf 2e       	mov	r11, r31
    1b18:	09 c0       	rjmp	.+18     	; 0x1b2c <vfprintf+0x272>
    1b1a:	34 fe       	sbrs	r3, 4
    1b1c:	0a c0       	rjmp	.+20     	; 0x1b32 <vfprintf+0x278>
    1b1e:	29 2f       	mov	r18, r25
    1b20:	26 60       	ori	r18, 0x06	; 6
    1b22:	b2 2e       	mov	r11, r18
    1b24:	06 c0       	rjmp	.+12     	; 0x1b32 <vfprintf+0x278>
    1b26:	28 e0       	ldi	r18, 0x08	; 8
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	05 c0       	rjmp	.+10     	; 0x1b36 <vfprintf+0x27c>
    1b2c:	20 e1       	ldi	r18, 0x10	; 16
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <vfprintf+0x27c>
    1b32:	20 e1       	ldi	r18, 0x10	; 16
    1b34:	32 e0       	ldi	r19, 0x02	; 2
    1b36:	f8 01       	movw	r30, r16
    1b38:	b7 fe       	sbrs	r11, 7
    1b3a:	07 c0       	rjmp	.+14     	; 0x1b4a <vfprintf+0x290>
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	0c 5f       	subi	r16, 0xFC	; 252
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
    1b48:	06 c0       	rjmp	.+12     	; 0x1b56 <vfprintf+0x29c>
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 5f       	subi	r16, 0xFE	; 254
    1b54:	1f 4f       	sbci	r17, 0xFF	; 255
    1b56:	a3 01       	movw	r20, r6
    1b58:	0e 94 a8 11 	call	0x2350	; 0x2350 <__ultoa_invert>
    1b5c:	88 2e       	mov	r8, r24
    1b5e:	86 18       	sub	r8, r6
    1b60:	fb 2d       	mov	r31, r11
    1b62:	ff 77       	andi	r31, 0x7F	; 127
    1b64:	3f 2e       	mov	r3, r31
    1b66:	36 fe       	sbrs	r3, 6
    1b68:	0d c0       	rjmp	.+26     	; 0x1b84 <vfprintf+0x2ca>
    1b6a:	23 2d       	mov	r18, r3
    1b6c:	2e 7f       	andi	r18, 0xFE	; 254
    1b6e:	a2 2e       	mov	r10, r18
    1b70:	89 14       	cp	r8, r9
    1b72:	58 f4       	brcc	.+22     	; 0x1b8a <vfprintf+0x2d0>
    1b74:	34 fe       	sbrs	r3, 4
    1b76:	0b c0       	rjmp	.+22     	; 0x1b8e <vfprintf+0x2d4>
    1b78:	32 fc       	sbrc	r3, 2
    1b7a:	09 c0       	rjmp	.+18     	; 0x1b8e <vfprintf+0x2d4>
    1b7c:	83 2d       	mov	r24, r3
    1b7e:	8e 7e       	andi	r24, 0xEE	; 238
    1b80:	a8 2e       	mov	r10, r24
    1b82:	05 c0       	rjmp	.+10     	; 0x1b8e <vfprintf+0x2d4>
    1b84:	b8 2c       	mov	r11, r8
    1b86:	a3 2c       	mov	r10, r3
    1b88:	03 c0       	rjmp	.+6      	; 0x1b90 <vfprintf+0x2d6>
    1b8a:	b8 2c       	mov	r11, r8
    1b8c:	01 c0       	rjmp	.+2      	; 0x1b90 <vfprintf+0x2d6>
    1b8e:	b9 2c       	mov	r11, r9
    1b90:	a4 fe       	sbrs	r10, 4
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <vfprintf+0x2f8>
    1b94:	fe 01       	movw	r30, r28
    1b96:	e8 0d       	add	r30, r8
    1b98:	f1 1d       	adc	r31, r1
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 33       	cpi	r24, 0x30	; 48
    1b9e:	21 f4       	brne	.+8      	; 0x1ba8 <vfprintf+0x2ee>
    1ba0:	9a 2d       	mov	r25, r10
    1ba2:	99 7e       	andi	r25, 0xE9	; 233
    1ba4:	a9 2e       	mov	r10, r25
    1ba6:	09 c0       	rjmp	.+18     	; 0x1bba <vfprintf+0x300>
    1ba8:	a2 fe       	sbrs	r10, 2
    1baa:	06 c0       	rjmp	.+12     	; 0x1bb8 <vfprintf+0x2fe>
    1bac:	b3 94       	inc	r11
    1bae:	b3 94       	inc	r11
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <vfprintf+0x300>
    1bb2:	8a 2d       	mov	r24, r10
    1bb4:	86 78       	andi	r24, 0x86	; 134
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <vfprintf+0x300>
    1bb8:	b3 94       	inc	r11
    1bba:	a3 fc       	sbrc	r10, 3
    1bbc:	11 c0       	rjmp	.+34     	; 0x1be0 <vfprintf+0x326>
    1bbe:	a0 fe       	sbrs	r10, 0
    1bc0:	06 c0       	rjmp	.+12     	; 0x1bce <vfprintf+0x314>
    1bc2:	b2 14       	cp	r11, r2
    1bc4:	88 f4       	brcc	.+34     	; 0x1be8 <vfprintf+0x32e>
    1bc6:	28 0c       	add	r2, r8
    1bc8:	92 2c       	mov	r9, r2
    1bca:	9b 18       	sub	r9, r11
    1bcc:	0e c0       	rjmp	.+28     	; 0x1bea <vfprintf+0x330>
    1bce:	b2 14       	cp	r11, r2
    1bd0:	60 f4       	brcc	.+24     	; 0x1bea <vfprintf+0x330>
    1bd2:	b6 01       	movw	r22, r12
    1bd4:	80 e2       	ldi	r24, 0x20	; 32
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <fputc>
    1bdc:	b3 94       	inc	r11
    1bde:	f7 cf       	rjmp	.-18     	; 0x1bce <vfprintf+0x314>
    1be0:	b2 14       	cp	r11, r2
    1be2:	18 f4       	brcc	.+6      	; 0x1bea <vfprintf+0x330>
    1be4:	2b 18       	sub	r2, r11
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <vfprintf+0x332>
    1be8:	98 2c       	mov	r9, r8
    1bea:	21 2c       	mov	r2, r1
    1bec:	a4 fe       	sbrs	r10, 4
    1bee:	10 c0       	rjmp	.+32     	; 0x1c10 <vfprintf+0x356>
    1bf0:	b6 01       	movw	r22, r12
    1bf2:	80 e3       	ldi	r24, 0x30	; 48
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 53 11 	call	0x22a6	; 0x22a6 <fputc>
    1bfa:	a2 fe       	sbrs	r10, 2
    1bfc:	17 c0       	rjmp	.+46     	; 0x1c2c <vfprintf+0x372>
    1bfe:	a1 fc       	sbrc	r10, 1
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <vfprintf+0x34e>
    1c02:	88 e7       	ldi	r24, 0x78	; 120
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <vfprintf+0x352>
    1c08:	88 e5       	ldi	r24, 0x58	; 88
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	b6 01       	movw	r22, r12
    1c0e:	0c c0       	rjmp	.+24     	; 0x1c28 <vfprintf+0x36e>
    1c10:	8a 2d       	mov	r24, r10
    1c12:	86 78       	andi	r24, 0x86	; 134
    1c14:	59 f0       	breq	.+22     	; 0x1c2c <vfprintf+0x372>
    1c16:	a1 fe       	sbrs	r10, 1
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <vfprintf+0x364>
    1c1a:	8b e2       	ldi	r24, 0x2B	; 43
    1c1c:	01 c0       	rjmp	.+2      	; 0x1c20 <vfprintf+0x366>
    1c1e:	80 e2       	ldi	r24, 0x20	; 32
    1c20:	a7 fc       	sbrc	r10, 7
    1c22:	8d e2       	ldi	r24, 0x2D	; 45
    1c24:	b6 01       	movw	r22, r12
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 53 11 	call	0x22a6	; 0x22a6 <fputc>
    1c2c:	89 14       	cp	r8, r9
    1c2e:	38 f4       	brcc	.+14     	; 0x1c3e <vfprintf+0x384>
    1c30:	b6 01       	movw	r22, r12
    1c32:	80 e3       	ldi	r24, 0x30	; 48
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	0e 94 53 11 	call	0x22a6	; 0x22a6 <fputc>
    1c3a:	9a 94       	dec	r9
    1c3c:	f7 cf       	rjmp	.-18     	; 0x1c2c <vfprintf+0x372>
    1c3e:	8a 94       	dec	r8
    1c40:	f3 01       	movw	r30, r6
    1c42:	e8 0d       	add	r30, r8
    1c44:	f1 1d       	adc	r31, r1
    1c46:	80 81       	ld	r24, Z
    1c48:	b6 01       	movw	r22, r12
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <fputc>
    1c50:	81 10       	cpse	r8, r1
    1c52:	f5 cf       	rjmp	.-22     	; 0x1c3e <vfprintf+0x384>
    1c54:	22 20       	and	r2, r2
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <vfprintf+0x3a0>
    1c58:	42 ce       	rjmp	.-892    	; 0x18de <vfprintf+0x24>
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	80 e2       	ldi	r24, 0x20	; 32
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 53 11 	call	0x22a6	; 0x22a6 <fputc>
    1c64:	2a 94       	dec	r2
    1c66:	f6 cf       	rjmp	.-20     	; 0x1c54 <vfprintf+0x39a>
    1c68:	f6 01       	movw	r30, r12
    1c6a:	86 81       	ldd	r24, Z+6	; 0x06
    1c6c:	97 81       	ldd	r25, Z+7	; 0x07
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <vfprintf+0x3ba>
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	9f ef       	ldi	r25, 0xFF	; 255
    1c74:	2b 96       	adiw	r28, 0x0b	; 11
    1c76:	e2 e1       	ldi	r30, 0x12	; 18
    1c78:	0c 94 25 12 	jmp	0x244a	; 0x244a <__epilogue_restores__>

00001c7c <putval>:
    1c7c:	20 fd       	sbrc	r18, 0
    1c7e:	09 c0       	rjmp	.+18     	; 0x1c92 <putval+0x16>
    1c80:	fc 01       	movw	r30, r24
    1c82:	23 fd       	sbrc	r18, 3
    1c84:	05 c0       	rjmp	.+10     	; 0x1c90 <putval+0x14>
    1c86:	22 ff       	sbrs	r18, 2
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <putval+0x12>
    1c8a:	73 83       	std	Z+3, r23	; 0x03
    1c8c:	62 83       	std	Z+2, r22	; 0x02
    1c8e:	51 83       	std	Z+1, r21	; 0x01
    1c90:	40 83       	st	Z, r20
    1c92:	08 95       	ret

00001c94 <mulacc>:
    1c94:	44 fd       	sbrc	r20, 4
    1c96:	17 c0       	rjmp	.+46     	; 0x1cc6 <mulacc+0x32>
    1c98:	46 fd       	sbrc	r20, 6
    1c9a:	17 c0       	rjmp	.+46     	; 0x1cca <mulacc+0x36>
    1c9c:	ab 01       	movw	r20, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	da 01       	movw	r26, r20
    1ca2:	fb 01       	movw	r30, r22
    1ca4:	aa 0f       	add	r26, r26
    1ca6:	bb 1f       	adc	r27, r27
    1ca8:	ee 1f       	adc	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	10 94       	com	r1
    1cae:	d1 f7       	brne	.-12     	; 0x1ca4 <mulacc+0x10>
    1cb0:	4a 0f       	add	r20, r26
    1cb2:	5b 1f       	adc	r21, r27
    1cb4:	6e 1f       	adc	r22, r30
    1cb6:	7f 1f       	adc	r23, r31
    1cb8:	cb 01       	movw	r24, r22
    1cba:	ba 01       	movw	r22, r20
    1cbc:	66 0f       	add	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	09 c0       	rjmp	.+18     	; 0x1cd8 <mulacc+0x44>
    1cc6:	33 e0       	ldi	r19, 0x03	; 3
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <mulacc+0x38>
    1cca:	34 e0       	ldi	r19, 0x04	; 4
    1ccc:	66 0f       	add	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	31 50       	subi	r19, 0x01	; 1
    1cd6:	d1 f7       	brne	.-12     	; 0x1ccc <mulacc+0x38>
    1cd8:	62 0f       	add	r22, r18
    1cda:	71 1d       	adc	r23, r1
    1cdc:	81 1d       	adc	r24, r1
    1cde:	91 1d       	adc	r25, r1
    1ce0:	08 95       	ret

00001ce2 <skip_spaces>:
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	8c 01       	movw	r16, r24
    1cec:	c8 01       	movw	r24, r16
    1cee:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    1cf2:	ec 01       	movw	r28, r24
    1cf4:	97 fd       	sbrc	r25, 7
    1cf6:	08 c0       	rjmp	.+16     	; 0x1d08 <skip_spaces+0x26>
    1cf8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <isspace>
    1cfc:	89 2b       	or	r24, r25
    1cfe:	b1 f7       	brne	.-20     	; 0x1cec <skip_spaces+0xa>
    1d00:	b8 01       	movw	r22, r16
    1d02:	ce 01       	movw	r24, r28
    1d04:	0e 94 8f 11 	call	0x231e	; 0x231e <ungetc>
    1d08:	ce 01       	movw	r24, r28
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	08 95       	ret

00001d14 <conv_int>:
    1d14:	8f 92       	push	r8
    1d16:	9f 92       	push	r9
    1d18:	af 92       	push	r10
    1d1a:	bf 92       	push	r11
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	8c 01       	movw	r16, r24
    1d2a:	d6 2f       	mov	r29, r22
    1d2c:	7a 01       	movw	r14, r20
    1d2e:	b2 2e       	mov	r11, r18
    1d30:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    1d34:	9c 01       	movw	r18, r24
    1d36:	33 27       	eor	r19, r19
    1d38:	2b 32       	cpi	r18, 0x2B	; 43
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	31 f0       	breq	.+12     	; 0x1d4a <conv_int+0x36>
    1d3e:	2d 32       	cpi	r18, 0x2D	; 45
    1d40:	31 05       	cpc	r19, r1
    1d42:	61 f4       	brne	.+24     	; 0x1d5c <conv_int+0x48>
    1d44:	8b 2d       	mov	r24, r11
    1d46:	80 68       	ori	r24, 0x80	; 128
    1d48:	b8 2e       	mov	r11, r24
    1d4a:	d1 50       	subi	r29, 0x01	; 1
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <conv_int+0x3e>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	68 c0       	rjmp	.+208    	; 0x1e22 <conv_int+0x10e>
    1d52:	c8 01       	movw	r24, r16
    1d54:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    1d58:	97 fd       	sbrc	r25, 7
    1d5a:	f9 cf       	rjmp	.-14     	; 0x1d4e <conv_int+0x3a>
    1d5c:	cb 2d       	mov	r28, r11
    1d5e:	cd 7f       	andi	r28, 0xFD	; 253
    1d60:	2b 2d       	mov	r18, r11
    1d62:	20 73       	andi	r18, 0x30	; 48
    1d64:	09 f5       	brne	.+66     	; 0x1da8 <conv_int+0x94>
    1d66:	80 33       	cpi	r24, 0x30	; 48
    1d68:	f9 f4       	brne	.+62     	; 0x1da8 <conv_int+0x94>
    1d6a:	aa 24       	eor	r10, r10
    1d6c:	aa 94       	dec	r10
    1d6e:	ad 0e       	add	r10, r29
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <conv_int+0x60>
    1d72:	43 c0       	rjmp	.+134    	; 0x1dfa <conv_int+0xe6>
    1d74:	c8 01       	movw	r24, r16
    1d76:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    1d7a:	97 fd       	sbrc	r25, 7
    1d7c:	3e c0       	rjmp	.+124    	; 0x1dfa <conv_int+0xe6>
    1d7e:	9c 01       	movw	r18, r24
    1d80:	2f 7d       	andi	r18, 0xDF	; 223
    1d82:	33 27       	eor	r19, r19
    1d84:	28 35       	cpi	r18, 0x58	; 88
    1d86:	31 05       	cpc	r19, r1
    1d88:	49 f4       	brne	.+18     	; 0x1d9c <conv_int+0x88>
    1d8a:	c2 64       	ori	r28, 0x42	; 66
    1d8c:	d2 50       	subi	r29, 0x02	; 2
    1d8e:	a9 f1       	breq	.+106    	; 0x1dfa <conv_int+0xe6>
    1d90:	c8 01       	movw	r24, r16
    1d92:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    1d96:	97 ff       	sbrs	r25, 7
    1d98:	07 c0       	rjmp	.+14     	; 0x1da8 <conv_int+0x94>
    1d9a:	2f c0       	rjmp	.+94     	; 0x1dfa <conv_int+0xe6>
    1d9c:	b6 fe       	sbrs	r11, 6
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <conv_int+0x90>
    1da0:	c2 60       	ori	r28, 0x02	; 2
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <conv_int+0x92>
    1da4:	c2 61       	ori	r28, 0x12	; 18
    1da6:	da 2d       	mov	r29, r10
    1da8:	81 2c       	mov	r8, r1
    1daa:	91 2c       	mov	r9, r1
    1dac:	54 01       	movw	r10, r8
    1dae:	20 ed       	ldi	r18, 0xD0	; 208
    1db0:	28 0f       	add	r18, r24
    1db2:	28 30       	cpi	r18, 0x08	; 8
    1db4:	80 f0       	brcs	.+32     	; 0x1dd6 <conv_int+0xc2>
    1db6:	c4 ff       	sbrs	r28, 4
    1db8:	04 c0       	rjmp	.+8      	; 0x1dc2 <conv_int+0xae>
    1dba:	b8 01       	movw	r22, r16
    1dbc:	0e 94 8f 11 	call	0x231e	; 0x231e <ungetc>
    1dc0:	19 c0       	rjmp	.+50     	; 0x1df4 <conv_int+0xe0>
    1dc2:	2a 30       	cpi	r18, 0x0A	; 10
    1dc4:	40 f0       	brcs	.+16     	; 0x1dd6 <conv_int+0xc2>
    1dc6:	c6 ff       	sbrs	r28, 6
    1dc8:	f8 cf       	rjmp	.-16     	; 0x1dba <conv_int+0xa6>
    1dca:	2f 7d       	andi	r18, 0xDF	; 223
    1dcc:	3f ee       	ldi	r19, 0xEF	; 239
    1dce:	32 0f       	add	r19, r18
    1dd0:	36 30       	cpi	r19, 0x06	; 6
    1dd2:	98 f7       	brcc	.-26     	; 0x1dba <conv_int+0xa6>
    1dd4:	27 50       	subi	r18, 0x07	; 7
    1dd6:	4c 2f       	mov	r20, r28
    1dd8:	c5 01       	movw	r24, r10
    1dda:	b4 01       	movw	r22, r8
    1ddc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <mulacc>
    1de0:	4b 01       	movw	r8, r22
    1de2:	5c 01       	movw	r10, r24
    1de4:	c2 60       	ori	r28, 0x02	; 2
    1de6:	d1 50       	subi	r29, 0x01	; 1
    1de8:	59 f0       	breq	.+22     	; 0x1e00 <conv_int+0xec>
    1dea:	c8 01       	movw	r24, r16
    1dec:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    1df0:	97 ff       	sbrs	r25, 7
    1df2:	dd cf       	rjmp	.-70     	; 0x1dae <conv_int+0x9a>
    1df4:	c1 fd       	sbrc	r28, 1
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <conv_int+0xec>
    1df8:	aa cf       	rjmp	.-172    	; 0x1d4e <conv_int+0x3a>
    1dfa:	81 2c       	mov	r8, r1
    1dfc:	91 2c       	mov	r9, r1
    1dfe:	54 01       	movw	r10, r8
    1e00:	c7 ff       	sbrs	r28, 7
    1e02:	08 c0       	rjmp	.+16     	; 0x1e14 <conv_int+0x100>
    1e04:	b0 94       	com	r11
    1e06:	a0 94       	com	r10
    1e08:	90 94       	com	r9
    1e0a:	80 94       	com	r8
    1e0c:	81 1c       	adc	r8, r1
    1e0e:	91 1c       	adc	r9, r1
    1e10:	a1 1c       	adc	r10, r1
    1e12:	b1 1c       	adc	r11, r1
    1e14:	2c 2f       	mov	r18, r28
    1e16:	b5 01       	movw	r22, r10
    1e18:	a4 01       	movw	r20, r8
    1e1a:	c7 01       	movw	r24, r14
    1e1c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <putval>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	bf 90       	pop	r11
    1e30:	af 90       	pop	r10
    1e32:	9f 90       	pop	r9
    1e34:	8f 90       	pop	r8
    1e36:	08 95       	ret

00001e38 <conv_brk>:
    1e38:	a0 e2       	ldi	r26, 0x20	; 32
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e2 e2       	ldi	r30, 0x22	; 34
    1e3e:	ff e0       	ldi	r31, 0x0F	; 15
    1e40:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__prologue_saves__+0x6>
    1e44:	5c 01       	movw	r10, r24
    1e46:	96 2e       	mov	r9, r22
    1e48:	7a 01       	movw	r14, r20
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	8e 01       	movw	r16, r28
    1e4e:	0f 5f       	subi	r16, 0xFF	; 255
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	68 01       	movw	r12, r16
    1e54:	80 e2       	ldi	r24, 0x20	; 32
    1e56:	d8 01       	movw	r26, r16
    1e58:	1d 92       	st	X+, r1
    1e5a:	8a 95       	dec	r24
    1e5c:	e9 f7       	brne	.-6      	; 0x1e58 <conv_brk+0x20>
    1e5e:	d5 01       	movw	r26, r10
    1e60:	13 96       	adiw	r26, 0x03	; 3
    1e62:	8c 90       	ld	r8, X
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	61 2c       	mov	r6, r1
    1e6a:	71 2c       	mov	r7, r1
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	61 e0       	ldi	r22, 0x01	; 1
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	83 fc       	sbrc	r8, 3
    1e74:	25 91       	lpm	r18, Z+
    1e76:	83 fe       	sbrs	r8, 3
    1e78:	21 91       	ld	r18, Z+
    1e7a:	8f 01       	movw	r16, r30
    1e7c:	52 2e       	mov	r5, r18
    1e7e:	21 11       	cpse	r18, r1
    1e80:	03 c0       	rjmp	.+6      	; 0x1e88 <conv_brk+0x50>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	92 c0       	rjmp	.+292    	; 0x1fac <conv_brk+0x174>
    1e88:	2e 35       	cpi	r18, 0x5E	; 94
    1e8a:	11 f4       	brne	.+4      	; 0x1e90 <conv_brk+0x58>
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	51 f1       	breq	.+84     	; 0x1ee4 <conv_brk+0xac>
    1e90:	43 2f       	mov	r20, r19
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	48 17       	cp	r20, r24
    1e96:	59 07       	cpc	r21, r25
    1e98:	3c f4       	brge	.+14     	; 0x1ea8 <conv_brk+0x70>
    1e9a:	2d 35       	cpi	r18, 0x5D	; 93
    1e9c:	59 f1       	breq	.+86     	; 0x1ef4 <conv_brk+0xbc>
    1e9e:	2d 32       	cpi	r18, 0x2D	; 45
    1ea0:	19 f4       	brne	.+6      	; 0x1ea8 <conv_brk+0x70>
    1ea2:	77 20       	and	r7, r7
    1ea4:	09 f1       	breq	.+66     	; 0x1ee8 <conv_brk+0xb0>
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <conv_brk+0x76>
    1ea8:	77 20       	and	r7, r7
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <conv_brk+0x76>
    1eac:	6a c0       	rjmp	.+212    	; 0x1f82 <conv_brk+0x14a>
    1eae:	45 2d       	mov	r20, r5
    1eb0:	46 95       	lsr	r20
    1eb2:	46 95       	lsr	r20
    1eb4:	46 95       	lsr	r20
    1eb6:	d6 01       	movw	r26, r12
    1eb8:	a4 0f       	add	r26, r20
    1eba:	b1 1d       	adc	r27, r1
    1ebc:	45 2d       	mov	r20, r5
    1ebe:	47 70       	andi	r20, 0x07	; 7
    1ec0:	8b 01       	movw	r16, r22
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <conv_brk+0x90>
    1ec4:	00 0f       	add	r16, r16
    1ec6:	11 1f       	adc	r17, r17
    1ec8:	4a 95       	dec	r20
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <conv_brk+0x8c>
    1ecc:	a8 01       	movw	r20, r16
    1ece:	5c 91       	ld	r21, X
    1ed0:	45 2b       	or	r20, r21
    1ed2:	4c 93       	st	X, r20
    1ed4:	65 14       	cp	r6, r5
    1ed6:	59 f0       	breq	.+22     	; 0x1eee <conv_brk+0xb6>
    1ed8:	56 14       	cp	r5, r6
    1eda:	10 f4       	brcc	.+4      	; 0x1ee0 <conv_brk+0xa8>
    1edc:	53 94       	inc	r5
    1ede:	e7 cf       	rjmp	.-50     	; 0x1eae <conv_brk+0x76>
    1ee0:	5a 94       	dec	r5
    1ee2:	e5 cf       	rjmp	.-54     	; 0x1eae <conv_brk+0x76>
    1ee4:	31 e0       	ldi	r19, 0x01	; 1
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <conv_brk+0xb8>
    1ee8:	77 24       	eor	r7, r7
    1eea:	73 94       	inc	r7
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <conv_brk+0xb8>
    1eee:	71 2c       	mov	r7, r1
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	bf cf       	rjmp	.-130    	; 0x1e72 <conv_brk+0x3a>
    1ef4:	77 20       	and	r7, r7
    1ef6:	19 f0       	breq	.+6      	; 0x1efe <conv_brk+0xc6>
    1ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    1efa:	80 62       	ori	r24, 0x20	; 32
    1efc:	8e 83       	std	Y+6, r24	; 0x06
    1efe:	31 11       	cpse	r19, r1
    1f00:	03 c0       	rjmp	.+6      	; 0x1f08 <conv_brk+0xd0>
    1f02:	88 24       	eor	r8, r8
    1f04:	83 94       	inc	r8
    1f06:	17 c0       	rjmp	.+46     	; 0x1f36 <conv_brk+0xfe>
    1f08:	f6 01       	movw	r30, r12
    1f0a:	9e 01       	movw	r18, r28
    1f0c:	2f 5d       	subi	r18, 0xDF	; 223
    1f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	80 95       	com	r24
    1f14:	81 93       	st	Z+, r24
    1f16:	2e 17       	cp	r18, r30
    1f18:	3f 07       	cpc	r19, r31
    1f1a:	d1 f7       	brne	.-12     	; 0x1f10 <conv_brk+0xd8>
    1f1c:	f2 cf       	rjmp	.-28     	; 0x1f02 <conv_brk+0xca>
    1f1e:	e1 14       	cp	r14, r1
    1f20:	f1 04       	cpc	r15, r1
    1f22:	29 f0       	breq	.+10     	; 0x1f2e <conv_brk+0xf6>
    1f24:	d7 01       	movw	r26, r14
    1f26:	8c 93       	st	X, r24
    1f28:	f7 01       	movw	r30, r14
    1f2a:	31 96       	adiw	r30, 0x01	; 1
    1f2c:	7f 01       	movw	r14, r30
    1f2e:	9a 94       	dec	r9
    1f30:	81 2c       	mov	r8, r1
    1f32:	99 20       	and	r9, r9
    1f34:	f9 f0       	breq	.+62     	; 0x1f74 <conv_brk+0x13c>
    1f36:	c5 01       	movw	r24, r10
    1f38:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    1f3c:	97 fd       	sbrc	r25, 7
    1f3e:	18 c0       	rjmp	.+48     	; 0x1f70 <conv_brk+0x138>
    1f40:	fc 01       	movw	r30, r24
    1f42:	ff 27       	eor	r31, r31
    1f44:	23 e0       	ldi	r18, 0x03	; 3
    1f46:	f5 95       	asr	r31
    1f48:	e7 95       	ror	r30
    1f4a:	2a 95       	dec	r18
    1f4c:	e1 f7       	brne	.-8      	; 0x1f46 <conv_brk+0x10e>
    1f4e:	ec 0d       	add	r30, r12
    1f50:	fd 1d       	adc	r31, r13
    1f52:	20 81       	ld	r18, Z
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	ac 01       	movw	r20, r24
    1f58:	47 70       	andi	r20, 0x07	; 7
    1f5a:	55 27       	eor	r21, r21
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <conv_brk+0x12a>
    1f5e:	35 95       	asr	r19
    1f60:	27 95       	ror	r18
    1f62:	4a 95       	dec	r20
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <conv_brk+0x126>
    1f66:	20 fd       	sbrc	r18, 0
    1f68:	da cf       	rjmp	.-76     	; 0x1f1e <conv_brk+0xe6>
    1f6a:	b5 01       	movw	r22, r10
    1f6c:	0e 94 8f 11 	call	0x231e	; 0x231e <ungetc>
    1f70:	81 10       	cpse	r8, r1
    1f72:	87 cf       	rjmp	.-242    	; 0x1e82 <conv_brk+0x4a>
    1f74:	e1 14       	cp	r14, r1
    1f76:	f1 04       	cpc	r15, r1
    1f78:	11 f0       	breq	.+4      	; 0x1f7e <conv_brk+0x146>
    1f7a:	d7 01       	movw	r26, r14
    1f7c:	1c 92       	st	X, r1
    1f7e:	c8 01       	movw	r24, r16
    1f80:	15 c0       	rjmp	.+42     	; 0x1fac <conv_brk+0x174>
    1f82:	42 2f       	mov	r20, r18
    1f84:	46 95       	lsr	r20
    1f86:	46 95       	lsr	r20
    1f88:	46 95       	lsr	r20
    1f8a:	d6 01       	movw	r26, r12
    1f8c:	a4 0f       	add	r26, r20
    1f8e:	b1 1d       	adc	r27, r1
    1f90:	42 2f       	mov	r20, r18
    1f92:	47 70       	andi	r20, 0x07	; 7
    1f94:	8b 01       	movw	r16, r22
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <conv_brk+0x164>
    1f98:	00 0f       	add	r16, r16
    1f9a:	11 1f       	adc	r17, r17
    1f9c:	4a 95       	dec	r20
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <conv_brk+0x160>
    1fa0:	a8 01       	movw	r20, r16
    1fa2:	5c 91       	ld	r21, X
    1fa4:	45 2b       	or	r20, r21
    1fa6:	4c 93       	st	X, r20
    1fa8:	62 2e       	mov	r6, r18
    1faa:	a2 cf       	rjmp	.-188    	; 0x1ef0 <conv_brk+0xb8>
    1fac:	a0 96       	adiw	r28, 0x20	; 32
    1fae:	ef e0       	ldi	r30, 0x0F	; 15
    1fb0:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__epilogue_restores__+0x6>

00001fb4 <vfscanf>:
    1fb4:	a0 e0       	ldi	r26, 0x00	; 0
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e0 ee       	ldi	r30, 0xE0	; 224
    1fba:	ff e0       	ldi	r31, 0x0F	; 15
    1fbc:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__prologue_saves__+0x6>
    1fc0:	6c 01       	movw	r12, r24
    1fc2:	eb 01       	movw	r28, r22
    1fc4:	5a 01       	movw	r10, r20
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	17 82       	std	Z+7, r1	; 0x07
    1fca:	16 82       	std	Z+6, r1	; 0x06
    1fcc:	51 2c       	mov	r5, r1
    1fce:	f6 01       	movw	r30, r12
    1fd0:	e3 80       	ldd	r14, Z+3	; 0x03
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e3 fc       	sbrc	r14, 3
    1fd6:	85 91       	lpm	r24, Z+
    1fd8:	e3 fe       	sbrs	r14, 3
    1fda:	81 91       	ld	r24, Z+
    1fdc:	18 2f       	mov	r17, r24
    1fde:	ef 01       	movw	r28, r30
    1fe0:	88 23       	and	r24, r24
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <vfscanf+0x32>
    1fe4:	ee c0       	rjmp	.+476    	; 0x21c2 <vfscanf+0x20e>
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <isspace>
    1fec:	89 2b       	or	r24, r25
    1fee:	21 f0       	breq	.+8      	; 0x1ff8 <vfscanf+0x44>
    1ff0:	c6 01       	movw	r24, r12
    1ff2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <skip_spaces>
    1ff6:	eb cf       	rjmp	.-42     	; 0x1fce <vfscanf+0x1a>
    1ff8:	15 32       	cpi	r17, 0x25	; 37
    1ffa:	41 f4       	brne	.+16     	; 0x200c <vfscanf+0x58>
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e3 fc       	sbrc	r14, 3
    2000:	15 91       	lpm	r17, Z+
    2002:	e3 fe       	sbrs	r14, 3
    2004:	11 91       	ld	r17, Z+
    2006:	ef 01       	movw	r28, r30
    2008:	15 32       	cpi	r17, 0x25	; 37
    200a:	81 f4       	brne	.+32     	; 0x202c <vfscanf+0x78>
    200c:	c6 01       	movw	r24, r12
    200e:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    2012:	97 fd       	sbrc	r25, 7
    2014:	d4 c0       	rjmp	.+424    	; 0x21be <vfscanf+0x20a>
    2016:	41 2f       	mov	r20, r17
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	9c 01       	movw	r18, r24
    201c:	33 27       	eor	r19, r19
    201e:	24 17       	cp	r18, r20
    2020:	35 07       	cpc	r19, r21
    2022:	a9 f2       	breq	.-86     	; 0x1fce <vfscanf+0x1a>
    2024:	b6 01       	movw	r22, r12
    2026:	0e 94 8f 11 	call	0x231e	; 0x231e <ungetc>
    202a:	cb c0       	rjmp	.+406    	; 0x21c2 <vfscanf+0x20e>
    202c:	1a 32       	cpi	r17, 0x2A	; 42
    202e:	39 f4       	brne	.+14     	; 0x203e <vfscanf+0x8a>
    2030:	e3 fc       	sbrc	r14, 3
    2032:	15 91       	lpm	r17, Z+
    2034:	e3 fe       	sbrs	r14, 3
    2036:	11 91       	ld	r17, Z+
    2038:	ef 01       	movw	r28, r30
    203a:	01 e0       	ldi	r16, 0x01	; 1
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <vfscanf+0x8c>
    203e:	00 e0       	ldi	r16, 0x00	; 0
    2040:	f1 2c       	mov	r15, r1
    2042:	20 ed       	ldi	r18, 0xD0	; 208
    2044:	21 0f       	add	r18, r17
    2046:	2a 30       	cpi	r18, 0x0A	; 10
    2048:	80 f4       	brcc	.+32     	; 0x206a <vfscanf+0xb6>
    204a:	02 60       	ori	r16, 0x02	; 2
    204c:	6f 2d       	mov	r22, r15
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <mulacc>
    205a:	f6 2e       	mov	r15, r22
    205c:	fe 01       	movw	r30, r28
    205e:	e3 fc       	sbrc	r14, 3
    2060:	15 91       	lpm	r17, Z+
    2062:	e3 fe       	sbrs	r14, 3
    2064:	11 91       	ld	r17, Z+
    2066:	ef 01       	movw	r28, r30
    2068:	ec cf       	rjmp	.-40     	; 0x2042 <vfscanf+0x8e>
    206a:	01 ff       	sbrs	r16, 1
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <vfscanf+0xc0>
    206e:	f1 10       	cpse	r15, r1
    2070:	03 c0       	rjmp	.+6      	; 0x2078 <vfscanf+0xc4>
    2072:	a7 c0       	rjmp	.+334    	; 0x21c2 <vfscanf+0x20e>
    2074:	ff 24       	eor	r15, r15
    2076:	fa 94       	dec	r15
    2078:	18 36       	cpi	r17, 0x68	; 104
    207a:	19 f0       	breq	.+6      	; 0x2082 <vfscanf+0xce>
    207c:	1c 36       	cpi	r17, 0x6C	; 108
    207e:	51 f0       	breq	.+20     	; 0x2094 <vfscanf+0xe0>
    2080:	10 c0       	rjmp	.+32     	; 0x20a2 <vfscanf+0xee>
    2082:	fe 01       	movw	r30, r28
    2084:	e3 fc       	sbrc	r14, 3
    2086:	15 91       	lpm	r17, Z+
    2088:	e3 fe       	sbrs	r14, 3
    208a:	11 91       	ld	r17, Z+
    208c:	ef 01       	movw	r28, r30
    208e:	18 36       	cpi	r17, 0x68	; 104
    2090:	41 f4       	brne	.+16     	; 0x20a2 <vfscanf+0xee>
    2092:	08 60       	ori	r16, 0x08	; 8
    2094:	04 60       	ori	r16, 0x04	; 4
    2096:	fe 01       	movw	r30, r28
    2098:	e3 fc       	sbrc	r14, 3
    209a:	15 91       	lpm	r17, Z+
    209c:	e3 fe       	sbrs	r14, 3
    209e:	11 91       	ld	r17, Z+
    20a0:	ef 01       	movw	r28, r30
    20a2:	11 23       	and	r17, r17
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <vfscanf+0xf4>
    20a6:	8d c0       	rjmp	.+282    	; 0x21c2 <vfscanf+0x20e>
    20a8:	61 2f       	mov	r22, r17
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	84 e5       	ldi	r24, 0x54	; 84
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <strchr_P>
    20b4:	89 2b       	or	r24, r25
    20b6:	09 f4       	brne	.+2      	; 0x20ba <vfscanf+0x106>
    20b8:	84 c0       	rjmp	.+264    	; 0x21c2 <vfscanf+0x20e>
    20ba:	00 fd       	sbrc	r16, 0
    20bc:	07 c0       	rjmp	.+14     	; 0x20cc <vfscanf+0x118>
    20be:	f5 01       	movw	r30, r10
    20c0:	80 80       	ld	r8, Z
    20c2:	91 80       	ldd	r9, Z+1	; 0x01
    20c4:	c5 01       	movw	r24, r10
    20c6:	02 96       	adiw	r24, 0x02	; 2
    20c8:	5c 01       	movw	r10, r24
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <vfscanf+0x11c>
    20cc:	81 2c       	mov	r8, r1
    20ce:	91 2c       	mov	r9, r1
    20d0:	1e 36       	cpi	r17, 0x6E	; 110
    20d2:	51 f4       	brne	.+20     	; 0x20e8 <vfscanf+0x134>
    20d4:	f6 01       	movw	r30, r12
    20d6:	46 81       	ldd	r20, Z+6	; 0x06
    20d8:	57 81       	ldd	r21, Z+7	; 0x07
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	20 2f       	mov	r18, r16
    20e0:	c4 01       	movw	r24, r8
    20e2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <putval>
    20e6:	73 cf       	rjmp	.-282    	; 0x1fce <vfscanf+0x1a>
    20e8:	13 36       	cpi	r17, 0x63	; 99
    20ea:	a9 f4       	brne	.+42     	; 0x2116 <vfscanf+0x162>
    20ec:	01 fd       	sbrc	r16, 1
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <vfscanf+0x140>
    20f0:	ff 24       	eor	r15, r15
    20f2:	f3 94       	inc	r15
    20f4:	c6 01       	movw	r24, r12
    20f6:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    20fa:	97 fd       	sbrc	r25, 7
    20fc:	60 c0       	rjmp	.+192    	; 0x21be <vfscanf+0x20a>
    20fe:	81 14       	cp	r8, r1
    2100:	91 04       	cpc	r9, r1
    2102:	29 f0       	breq	.+10     	; 0x210e <vfscanf+0x15a>
    2104:	f4 01       	movw	r30, r8
    2106:	80 83       	st	Z, r24
    2108:	c4 01       	movw	r24, r8
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	4c 01       	movw	r8, r24
    210e:	fa 94       	dec	r15
    2110:	f1 10       	cpse	r15, r1
    2112:	f0 cf       	rjmp	.-32     	; 0x20f4 <vfscanf+0x140>
    2114:	50 c0       	rjmp	.+160    	; 0x21b6 <vfscanf+0x202>
    2116:	1b 35       	cpi	r17, 0x5B	; 91
    2118:	59 f4       	brne	.+22     	; 0x2130 <vfscanf+0x17c>
    211a:	9e 01       	movw	r18, r28
    211c:	a4 01       	movw	r20, r8
    211e:	6f 2d       	mov	r22, r15
    2120:	c6 01       	movw	r24, r12
    2122:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <conv_brk>
    2126:	ec 01       	movw	r28, r24
    2128:	89 2b       	or	r24, r25
    212a:	09 f0       	breq	.+2      	; 0x212e <vfscanf+0x17a>
    212c:	44 c0       	rjmp	.+136    	; 0x21b6 <vfscanf+0x202>
    212e:	3e c0       	rjmp	.+124    	; 0x21ac <vfscanf+0x1f8>
    2130:	c6 01       	movw	r24, r12
    2132:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <skip_spaces>
    2136:	97 fd       	sbrc	r25, 7
    2138:	42 c0       	rjmp	.+132    	; 0x21be <vfscanf+0x20a>
    213a:	1f 36       	cpi	r17, 0x6F	; 111
    213c:	61 f1       	breq	.+88     	; 0x2196 <vfscanf+0x1e2>
    213e:	28 f4       	brcc	.+10     	; 0x214a <vfscanf+0x196>
    2140:	14 36       	cpi	r17, 0x64	; 100
    2142:	39 f1       	breq	.+78     	; 0x2192 <vfscanf+0x1de>
    2144:	19 36       	cpi	r17, 0x69	; 105
    2146:	51 f1       	breq	.+84     	; 0x219c <vfscanf+0x1e8>
    2148:	28 c0       	rjmp	.+80     	; 0x219a <vfscanf+0x1e6>
    214a:	13 37       	cpi	r17, 0x73	; 115
    214c:	71 f0       	breq	.+28     	; 0x216a <vfscanf+0x1b6>
    214e:	15 37       	cpi	r17, 0x75	; 117
    2150:	01 f1       	breq	.+64     	; 0x2192 <vfscanf+0x1de>
    2152:	23 c0       	rjmp	.+70     	; 0x219a <vfscanf+0x1e6>
    2154:	81 14       	cp	r8, r1
    2156:	91 04       	cpc	r9, r1
    2158:	29 f0       	breq	.+10     	; 0x2164 <vfscanf+0x1b0>
    215a:	f4 01       	movw	r30, r8
    215c:	60 82       	st	Z, r6
    215e:	c4 01       	movw	r24, r8
    2160:	01 96       	adiw	r24, 0x01	; 1
    2162:	4c 01       	movw	r8, r24
    2164:	fa 94       	dec	r15
    2166:	ff 20       	and	r15, r15
    2168:	71 f0       	breq	.+28     	; 0x2186 <vfscanf+0x1d2>
    216a:	c6 01       	movw	r24, r12
    216c:	0e 94 15 11 	call	0x222a	; 0x222a <fgetc>
    2170:	3c 01       	movw	r6, r24
    2172:	97 fd       	sbrc	r25, 7
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <vfscanf+0x1d2>
    2176:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <isspace>
    217a:	89 2b       	or	r24, r25
    217c:	59 f3       	breq	.-42     	; 0x2154 <vfscanf+0x1a0>
    217e:	b6 01       	movw	r22, r12
    2180:	c3 01       	movw	r24, r6
    2182:	0e 94 8f 11 	call	0x231e	; 0x231e <ungetc>
    2186:	81 14       	cp	r8, r1
    2188:	91 04       	cpc	r9, r1
    218a:	a9 f0       	breq	.+42     	; 0x21b6 <vfscanf+0x202>
    218c:	f4 01       	movw	r30, r8
    218e:	10 82       	st	Z, r1
    2190:	12 c0       	rjmp	.+36     	; 0x21b6 <vfscanf+0x202>
    2192:	00 62       	ori	r16, 0x20	; 32
    2194:	03 c0       	rjmp	.+6      	; 0x219c <vfscanf+0x1e8>
    2196:	00 61       	ori	r16, 0x10	; 16
    2198:	01 c0       	rjmp	.+2      	; 0x219c <vfscanf+0x1e8>
    219a:	00 64       	ori	r16, 0x40	; 64
    219c:	20 2f       	mov	r18, r16
    219e:	a4 01       	movw	r20, r8
    21a0:	6f 2d       	mov	r22, r15
    21a2:	c6 01       	movw	r24, r12
    21a4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <conv_int>
    21a8:	81 11       	cpse	r24, r1
    21aa:	05 c0       	rjmp	.+10     	; 0x21b6 <vfscanf+0x202>
    21ac:	f6 01       	movw	r30, r12
    21ae:	83 81       	ldd	r24, Z+3	; 0x03
    21b0:	80 73       	andi	r24, 0x30	; 48
    21b2:	29 f4       	brne	.+10     	; 0x21be <vfscanf+0x20a>
    21b4:	06 c0       	rjmp	.+12     	; 0x21c2 <vfscanf+0x20e>
    21b6:	00 fd       	sbrc	r16, 0
    21b8:	0a cf       	rjmp	.-492    	; 0x1fce <vfscanf+0x1a>
    21ba:	53 94       	inc	r5
    21bc:	08 cf       	rjmp	.-496    	; 0x1fce <vfscanf+0x1a>
    21be:	55 20       	and	r5, r5
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <vfscanf+0x214>
    21c2:	85 2d       	mov	r24, r5
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <vfscanf+0x218>
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	9f ef       	ldi	r25, 0xFF	; 255
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	ef e0       	ldi	r30, 0x0F	; 15
    21d2:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__epilogue_restores__+0x6>

000021d6 <isspace>:
    21d6:	91 11       	cpse	r25, r1
    21d8:	0c 94 06 12 	jmp	0x240c	; 0x240c <__ctype_isfalse>
    21dc:	80 32       	cpi	r24, 0x20	; 32
    21de:	19 f0       	breq	.+6      	; 0x21e6 <isspace+0x10>
    21e0:	89 50       	subi	r24, 0x09	; 9
    21e2:	85 50       	subi	r24, 0x05	; 5
    21e4:	c8 f7       	brcc	.-14     	; 0x21d8 <isspace+0x2>
    21e6:	08 95       	ret

000021e8 <strchr_P>:
    21e8:	fc 01       	movw	r30, r24
    21ea:	05 90       	lpm	r0, Z+
    21ec:	06 16       	cp	r0, r22
    21ee:	21 f0       	breq	.+8      	; 0x21f8 <strchr_P+0x10>
    21f0:	00 20       	and	r0, r0
    21f2:	d9 f7       	brne	.-10     	; 0x21ea <strchr_P+0x2>
    21f4:	c0 01       	movw	r24, r0
    21f6:	08 95       	ret
    21f8:	31 97       	sbiw	r30, 0x01	; 1
    21fa:	cf 01       	movw	r24, r30
    21fc:	08 95       	ret

000021fe <strnlen_P>:
    21fe:	fc 01       	movw	r30, r24
    2200:	05 90       	lpm	r0, Z+
    2202:	61 50       	subi	r22, 0x01	; 1
    2204:	70 40       	sbci	r23, 0x00	; 0
    2206:	01 10       	cpse	r0, r1
    2208:	d8 f7       	brcc	.-10     	; 0x2200 <strnlen_P+0x2>
    220a:	80 95       	com	r24
    220c:	90 95       	com	r25
    220e:	8e 0f       	add	r24, r30
    2210:	9f 1f       	adc	r25, r31
    2212:	08 95       	ret

00002214 <strnlen>:
    2214:	fc 01       	movw	r30, r24
    2216:	61 50       	subi	r22, 0x01	; 1
    2218:	70 40       	sbci	r23, 0x00	; 0
    221a:	01 90       	ld	r0, Z+
    221c:	01 10       	cpse	r0, r1
    221e:	d8 f7       	brcc	.-10     	; 0x2216 <strnlen+0x2>
    2220:	80 95       	com	r24
    2222:	90 95       	com	r25
    2224:	8e 0f       	add	r24, r30
    2226:	9f 1f       	adc	r25, r31
    2228:	08 95       	ret

0000222a <fgetc>:
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	ec 01       	movw	r28, r24
    2230:	2b 81       	ldd	r18, Y+3	; 0x03
    2232:	20 ff       	sbrs	r18, 0
    2234:	33 c0       	rjmp	.+102    	; 0x229c <fgetc+0x72>
    2236:	26 ff       	sbrs	r18, 6
    2238:	0a c0       	rjmp	.+20     	; 0x224e <fgetc+0x24>
    223a:	2f 7b       	andi	r18, 0xBF	; 191
    223c:	2b 83       	std	Y+3, r18	; 0x03
    223e:	8e 81       	ldd	r24, Y+6	; 0x06
    2240:	9f 81       	ldd	r25, Y+7	; 0x07
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	9f 83       	std	Y+7, r25	; 0x07
    2246:	8e 83       	std	Y+6, r24	; 0x06
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	29 c0       	rjmp	.+82     	; 0x22a0 <fgetc+0x76>
    224e:	22 ff       	sbrs	r18, 2
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <fgetc+0x46>
    2252:	e8 81       	ld	r30, Y
    2254:	f9 81       	ldd	r31, Y+1	; 0x01
    2256:	80 81       	ld	r24, Z
    2258:	08 2e       	mov	r0, r24
    225a:	00 0c       	add	r0, r0
    225c:	99 0b       	sbc	r25, r25
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	19 f4       	brne	.+6      	; 0x2268 <fgetc+0x3e>
    2262:	20 62       	ori	r18, 0x20	; 32
    2264:	2b 83       	std	Y+3, r18	; 0x03
    2266:	1a c0       	rjmp	.+52     	; 0x229c <fgetc+0x72>
    2268:	31 96       	adiw	r30, 0x01	; 1
    226a:	f9 83       	std	Y+1, r31	; 0x01
    226c:	e8 83       	st	Y, r30
    226e:	0e c0       	rjmp	.+28     	; 0x228c <fgetc+0x62>
    2270:	ea 85       	ldd	r30, Y+10	; 0x0a
    2272:	fb 85       	ldd	r31, Y+11	; 0x0b
    2274:	09 95       	icall
    2276:	97 ff       	sbrs	r25, 7
    2278:	09 c0       	rjmp	.+18     	; 0x228c <fgetc+0x62>
    227a:	2b 81       	ldd	r18, Y+3	; 0x03
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	11 f0       	breq	.+4      	; 0x2284 <fgetc+0x5a>
    2280:	80 e2       	ldi	r24, 0x20	; 32
    2282:	01 c0       	rjmp	.+2      	; 0x2286 <fgetc+0x5c>
    2284:	80 e1       	ldi	r24, 0x10	; 16
    2286:	82 2b       	or	r24, r18
    2288:	8b 83       	std	Y+3, r24	; 0x03
    228a:	08 c0       	rjmp	.+16     	; 0x229c <fgetc+0x72>
    228c:	2e 81       	ldd	r18, Y+6	; 0x06
    228e:	3f 81       	ldd	r19, Y+7	; 0x07
    2290:	2f 5f       	subi	r18, 0xFF	; 255
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	3f 83       	std	Y+7, r19	; 0x07
    2296:	2e 83       	std	Y+6, r18	; 0x06
    2298:	99 27       	eor	r25, r25
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <fgetc+0x76>
    229c:	8f ef       	ldi	r24, 0xFF	; 255
    229e:	9f ef       	ldi	r25, 0xFF	; 255
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <fputc>:
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	fb 01       	movw	r30, r22
    22b0:	23 81       	ldd	r18, Z+3	; 0x03
    22b2:	21 fd       	sbrc	r18, 1
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <fputc+0x16>
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	2c c0       	rjmp	.+88     	; 0x2314 <fputc+0x6e>
    22bc:	22 ff       	sbrs	r18, 2
    22be:	16 c0       	rjmp	.+44     	; 0x22ec <fputc+0x46>
    22c0:	46 81       	ldd	r20, Z+6	; 0x06
    22c2:	57 81       	ldd	r21, Z+7	; 0x07
    22c4:	24 81       	ldd	r18, Z+4	; 0x04
    22c6:	35 81       	ldd	r19, Z+5	; 0x05
    22c8:	42 17       	cp	r20, r18
    22ca:	53 07       	cpc	r21, r19
    22cc:	44 f4       	brge	.+16     	; 0x22de <fputc+0x38>
    22ce:	a0 81       	ld	r26, Z
    22d0:	b1 81       	ldd	r27, Z+1	; 0x01
    22d2:	9d 01       	movw	r18, r26
    22d4:	2f 5f       	subi	r18, 0xFF	; 255
    22d6:	3f 4f       	sbci	r19, 0xFF	; 255
    22d8:	31 83       	std	Z+1, r19	; 0x01
    22da:	20 83       	st	Z, r18
    22dc:	8c 93       	st	X, r24
    22de:	26 81       	ldd	r18, Z+6	; 0x06
    22e0:	37 81       	ldd	r19, Z+7	; 0x07
    22e2:	2f 5f       	subi	r18, 0xFF	; 255
    22e4:	3f 4f       	sbci	r19, 0xFF	; 255
    22e6:	37 83       	std	Z+7, r19	; 0x07
    22e8:	26 83       	std	Z+6, r18	; 0x06
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <fputc+0x6e>
    22ec:	8b 01       	movw	r16, r22
    22ee:	ec 01       	movw	r28, r24
    22f0:	fb 01       	movw	r30, r22
    22f2:	00 84       	ldd	r0, Z+8	; 0x08
    22f4:	f1 85       	ldd	r31, Z+9	; 0x09
    22f6:	e0 2d       	mov	r30, r0
    22f8:	09 95       	icall
    22fa:	89 2b       	or	r24, r25
    22fc:	e1 f6       	brne	.-72     	; 0x22b6 <fputc+0x10>
    22fe:	d8 01       	movw	r26, r16
    2300:	16 96       	adiw	r26, 0x06	; 6
    2302:	8d 91       	ld	r24, X+
    2304:	9c 91       	ld	r25, X
    2306:	17 97       	sbiw	r26, 0x07	; 7
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	17 96       	adiw	r26, 0x07	; 7
    230c:	9c 93       	st	X, r25
    230e:	8e 93       	st	-X, r24
    2310:	16 97       	sbiw	r26, 0x06	; 6
    2312:	ce 01       	movw	r24, r28
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	08 95       	ret

0000231e <ungetc>:
    231e:	fb 01       	movw	r30, r22
    2320:	23 81       	ldd	r18, Z+3	; 0x03
    2322:	20 ff       	sbrs	r18, 0
    2324:	12 c0       	rjmp	.+36     	; 0x234a <ungetc+0x2c>
    2326:	26 fd       	sbrc	r18, 6
    2328:	10 c0       	rjmp	.+32     	; 0x234a <ungetc+0x2c>
    232a:	8f 3f       	cpi	r24, 0xFF	; 255
    232c:	3f ef       	ldi	r19, 0xFF	; 255
    232e:	93 07       	cpc	r25, r19
    2330:	61 f0       	breq	.+24     	; 0x234a <ungetc+0x2c>
    2332:	82 83       	std	Z+2, r24	; 0x02
    2334:	2f 7d       	andi	r18, 0xDF	; 223
    2336:	20 64       	ori	r18, 0x40	; 64
    2338:	23 83       	std	Z+3, r18	; 0x03
    233a:	26 81       	ldd	r18, Z+6	; 0x06
    233c:	37 81       	ldd	r19, Z+7	; 0x07
    233e:	21 50       	subi	r18, 0x01	; 1
    2340:	31 09       	sbc	r19, r1
    2342:	37 83       	std	Z+7, r19	; 0x07
    2344:	26 83       	std	Z+6, r18	; 0x06
    2346:	99 27       	eor	r25, r25
    2348:	08 95       	ret
    234a:	8f ef       	ldi	r24, 0xFF	; 255
    234c:	9f ef       	ldi	r25, 0xFF	; 255
    234e:	08 95       	ret

00002350 <__ultoa_invert>:
    2350:	fa 01       	movw	r30, r20
    2352:	aa 27       	eor	r26, r26
    2354:	28 30       	cpi	r18, 0x08	; 8
    2356:	51 f1       	breq	.+84     	; 0x23ac <__ultoa_invert+0x5c>
    2358:	20 31       	cpi	r18, 0x10	; 16
    235a:	81 f1       	breq	.+96     	; 0x23bc <__ultoa_invert+0x6c>
    235c:	e8 94       	clt
    235e:	6f 93       	push	r22
    2360:	6e 7f       	andi	r22, 0xFE	; 254
    2362:	6e 5f       	subi	r22, 0xFE	; 254
    2364:	7f 4f       	sbci	r23, 0xFF	; 255
    2366:	8f 4f       	sbci	r24, 0xFF	; 255
    2368:	9f 4f       	sbci	r25, 0xFF	; 255
    236a:	af 4f       	sbci	r26, 0xFF	; 255
    236c:	b1 e0       	ldi	r27, 0x01	; 1
    236e:	3e d0       	rcall	.+124    	; 0x23ec <__ultoa_invert+0x9c>
    2370:	b4 e0       	ldi	r27, 0x04	; 4
    2372:	3c d0       	rcall	.+120    	; 0x23ec <__ultoa_invert+0x9c>
    2374:	67 0f       	add	r22, r23
    2376:	78 1f       	adc	r23, r24
    2378:	89 1f       	adc	r24, r25
    237a:	9a 1f       	adc	r25, r26
    237c:	a1 1d       	adc	r26, r1
    237e:	68 0f       	add	r22, r24
    2380:	79 1f       	adc	r23, r25
    2382:	8a 1f       	adc	r24, r26
    2384:	91 1d       	adc	r25, r1
    2386:	a1 1d       	adc	r26, r1
    2388:	6a 0f       	add	r22, r26
    238a:	71 1d       	adc	r23, r1
    238c:	81 1d       	adc	r24, r1
    238e:	91 1d       	adc	r25, r1
    2390:	a1 1d       	adc	r26, r1
    2392:	20 d0       	rcall	.+64     	; 0x23d4 <__ultoa_invert+0x84>
    2394:	09 f4       	brne	.+2      	; 0x2398 <__ultoa_invert+0x48>
    2396:	68 94       	set
    2398:	3f 91       	pop	r19
    239a:	2a e0       	ldi	r18, 0x0A	; 10
    239c:	26 9f       	mul	r18, r22
    239e:	11 24       	eor	r1, r1
    23a0:	30 19       	sub	r19, r0
    23a2:	30 5d       	subi	r19, 0xD0	; 208
    23a4:	31 93       	st	Z+, r19
    23a6:	de f6       	brtc	.-74     	; 0x235e <__ultoa_invert+0xe>
    23a8:	cf 01       	movw	r24, r30
    23aa:	08 95       	ret
    23ac:	46 2f       	mov	r20, r22
    23ae:	47 70       	andi	r20, 0x07	; 7
    23b0:	40 5d       	subi	r20, 0xD0	; 208
    23b2:	41 93       	st	Z+, r20
    23b4:	b3 e0       	ldi	r27, 0x03	; 3
    23b6:	0f d0       	rcall	.+30     	; 0x23d6 <__ultoa_invert+0x86>
    23b8:	c9 f7       	brne	.-14     	; 0x23ac <__ultoa_invert+0x5c>
    23ba:	f6 cf       	rjmp	.-20     	; 0x23a8 <__ultoa_invert+0x58>
    23bc:	46 2f       	mov	r20, r22
    23be:	4f 70       	andi	r20, 0x0F	; 15
    23c0:	40 5d       	subi	r20, 0xD0	; 208
    23c2:	4a 33       	cpi	r20, 0x3A	; 58
    23c4:	18 f0       	brcs	.+6      	; 0x23cc <__ultoa_invert+0x7c>
    23c6:	49 5d       	subi	r20, 0xD9	; 217
    23c8:	31 fd       	sbrc	r19, 1
    23ca:	40 52       	subi	r20, 0x20	; 32
    23cc:	41 93       	st	Z+, r20
    23ce:	02 d0       	rcall	.+4      	; 0x23d4 <__ultoa_invert+0x84>
    23d0:	a9 f7       	brne	.-22     	; 0x23bc <__ultoa_invert+0x6c>
    23d2:	ea cf       	rjmp	.-44     	; 0x23a8 <__ultoa_invert+0x58>
    23d4:	b4 e0       	ldi	r27, 0x04	; 4
    23d6:	a6 95       	lsr	r26
    23d8:	97 95       	ror	r25
    23da:	87 95       	ror	r24
    23dc:	77 95       	ror	r23
    23de:	67 95       	ror	r22
    23e0:	ba 95       	dec	r27
    23e2:	c9 f7       	brne	.-14     	; 0x23d6 <__ultoa_invert+0x86>
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	61 05       	cpc	r22, r1
    23e8:	71 05       	cpc	r23, r1
    23ea:	08 95       	ret
    23ec:	9b 01       	movw	r18, r22
    23ee:	ac 01       	movw	r20, r24
    23f0:	0a 2e       	mov	r0, r26
    23f2:	06 94       	lsr	r0
    23f4:	57 95       	ror	r21
    23f6:	47 95       	ror	r20
    23f8:	37 95       	ror	r19
    23fa:	27 95       	ror	r18
    23fc:	ba 95       	dec	r27
    23fe:	c9 f7       	brne	.-14     	; 0x23f2 <__ultoa_invert+0xa2>
    2400:	62 0f       	add	r22, r18
    2402:	73 1f       	adc	r23, r19
    2404:	84 1f       	adc	r24, r20
    2406:	95 1f       	adc	r25, r21
    2408:	a0 1d       	adc	r26, r0
    240a:	08 95       	ret

0000240c <__ctype_isfalse>:
    240c:	99 27       	eor	r25, r25
    240e:	88 27       	eor	r24, r24

00002410 <__ctype_istrue>:
    2410:	08 95       	ret

00002412 <__prologue_saves__>:
    2412:	2f 92       	push	r2
    2414:	3f 92       	push	r3
    2416:	4f 92       	push	r4
    2418:	5f 92       	push	r5
    241a:	6f 92       	push	r6
    241c:	7f 92       	push	r7
    241e:	8f 92       	push	r8
    2420:	9f 92       	push	r9
    2422:	af 92       	push	r10
    2424:	bf 92       	push	r11
    2426:	cf 92       	push	r12
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	ca 1b       	sub	r28, r26
    243c:	db 0b       	sbc	r29, r27
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	09 94       	ijmp

0000244a <__epilogue_restores__>:
    244a:	2a 88       	ldd	r2, Y+18	; 0x12
    244c:	39 88       	ldd	r3, Y+17	; 0x11
    244e:	48 88       	ldd	r4, Y+16	; 0x10
    2450:	5f 84       	ldd	r5, Y+15	; 0x0f
    2452:	6e 84       	ldd	r6, Y+14	; 0x0e
    2454:	7d 84       	ldd	r7, Y+13	; 0x0d
    2456:	8c 84       	ldd	r8, Y+12	; 0x0c
    2458:	9b 84       	ldd	r9, Y+11	; 0x0b
    245a:	aa 84       	ldd	r10, Y+10	; 0x0a
    245c:	b9 84       	ldd	r11, Y+9	; 0x09
    245e:	c8 84       	ldd	r12, Y+8	; 0x08
    2460:	df 80       	ldd	r13, Y+7	; 0x07
    2462:	ee 80       	ldd	r14, Y+6	; 0x06
    2464:	fd 80       	ldd	r15, Y+5	; 0x05
    2466:	0c 81       	ldd	r16, Y+4	; 0x04
    2468:	1b 81       	ldd	r17, Y+3	; 0x03
    246a:	aa 81       	ldd	r26, Y+2	; 0x02
    246c:	b9 81       	ldd	r27, Y+1	; 0x01
    246e:	ce 0f       	add	r28, r30
    2470:	d1 1d       	adc	r29, r1
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	ed 01       	movw	r28, r26
    247e:	08 95       	ret

00002480 <_exit>:
    2480:	f8 94       	cli

00002482 <__stop_program>:
    2482:	ff cf       	rjmp	.-2      	; 0x2482 <__stop_program>
